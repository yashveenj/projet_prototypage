
capteur_capa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053a0  080053a0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080053a0  080053a0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080053a0  080053a0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053a0  080053a0  000153a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053a4  080053a4  000153a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080053a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  20000020  080053c8  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  080053c8  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a30f  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001815  00000000  00000000  0002a35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  0002bb78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002c540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014fb5  00000000  00000000  0002ce50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b667  00000000  00000000  00041e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083620  00000000  00000000  0004d46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d0a8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002984  00000000  00000000  000d0adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005358 	.word	0x08005358

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08005358 	.word	0x08005358

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <SevenSegment_Update>:
        0x07,  // 7
        0x7f,  // 8
        0x67   // 9
};

void SevenSegment_Update(uint8_t number){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, ((number>>0)&0x01));
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	461a      	mov	r2, r3
 8000a18:	2102      	movs	r1, #2
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1e:	f001 fad5 	bl	8001fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, ((number>>1)&0x01));
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	085b      	lsrs	r3, r3, #1
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	f003 0301 	and.w	r3, r3, #1
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	461a      	mov	r2, r3
 8000a30:	2104      	movs	r1, #4
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f001 fac9 	bl	8001fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, ((number>>2)&0x01));
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	089b      	lsrs	r3, r3, #2
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	461a      	mov	r2, r3
 8000a48:	2108      	movs	r1, #8
 8000a4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4e:	f001 fabd 	bl	8001fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, ((number>>3)&0x01));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	08db      	lsrs	r3, r3, #3
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	f003 0301 	and.w	r3, r3, #1
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	461a      	mov	r2, r3
 8000a60:	2110      	movs	r1, #16
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f001 fab1 	bl	8001fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, ((number>>4)&0x01));
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	091b      	lsrs	r3, r3, #4
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	461a      	mov	r2, r3
 8000a78:	2120      	movs	r1, #32
 8000a7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7e:	f001 faa5 	bl	8001fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, ((number>>5)&0x01));
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	095b      	lsrs	r3, r3, #5
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	f003 0301 	and.w	r3, r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	2140      	movs	r1, #64	; 0x40
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f001 fa99 	bl	8001fcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, ((number>>6)&0x01));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	099b      	lsrs	r3, r3, #6
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f003 0301 	and.w	r3, r3, #1
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	2180      	movs	r1, #128	; 0x80
 8000aaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aae:	f001 fa8d 	bl	8001fcc <HAL_GPIO_WritePin>
}
 8000ab2:	bf00      	nop
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac2:	f000 ff5d 	bl	8001980 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac6:	f000 fa45 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aca:	f000 fc0b 	bl	80012e4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ace:	f000 fb4f 	bl	8001170 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ad2:	f000 fa9f 	bl	8001014 <MX_TIM1_Init>
  MX_TIM16_Init();
 8000ad6:	f000 fbbb 	bl	8001250 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_Base_Start_IT(&htim2);
 8000ada:	48b6      	ldr	r0, [pc, #728]	; (8000db4 <main+0x2f8>)
 8000adc:	f002 fec2 	bl	8003864 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 8000ae0:	48b5      	ldr	r0, [pc, #724]	; (8000db8 <main+0x2fc>)
 8000ae2:	f002 febf 	bl	8003864 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	48b2      	ldr	r0, [pc, #712]	; (8000db4 <main+0x2f8>)
 8000aea:	f003 f947 	bl	8003d7c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim16, TIM_CHANNEL_1);
 8000aee:	2100      	movs	r1, #0
 8000af0:	48b1      	ldr	r0, [pc, #708]	; (8000db8 <main+0x2fc>)
 8000af2:	f003 f943 	bl	8003d7c <HAL_TIM_IC_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	calcul_capa();
 8000af6:	f000 fc77 	bl	80013e8 <calcul_capa>
	GPIO_PinState etat = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8000afa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000afe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b02:	f001 fa4b 	bl	8001f9c <HAL_GPIO_ReadPin>
 8000b06:	4603      	mov	r3, r0
 8000b08:	73fb      	strb	r3, [r7, #15]
	if(etat == 1){
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d102      	bne.n	8000b16 <main+0x5a>
	  	   actif=0;
 8000b10:	4baa      	ldr	r3, [pc, #680]	; (8000dbc <main+0x300>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
	}
	if(actif==1){
 8000b16:	4ba9      	ldr	r3, [pc, #676]	; (8000dbc <main+0x300>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	f040 8168 	bne.w	8000df0 <main+0x334>
		if (counter <= 0) {
 8000b20:	4ba7      	ldr	r3, [pc, #668]	; (8000dc0 <main+0x304>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f300 809b 	bgt.w	8000c60 <main+0x1a4>

					  				int un=1111;
 8000b2a:	f240 4357 	movw	r3, #1111	; 0x457
 8000b2e:	607b      	str	r3, [r7, #4]
					  				temp1 = un/1000; //1 - 1st digit
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4aa4      	ldr	r2, [pc, #656]	; (8000dc4 <main+0x308>)
 8000b34:	fb82 1203 	smull	r1, r2, r2, r3
 8000b38:	1192      	asrs	r2, r2, #6
 8000b3a:	17db      	asrs	r3, r3, #31
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	4ba1      	ldr	r3, [pc, #644]	; (8000dc8 <main+0x30c>)
 8000b42:	701a      	strb	r2, [r3, #0]
					  				temp2 = ((un/100)%10); //2 - 2nd digit
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4aa1      	ldr	r2, [pc, #644]	; (8000dcc <main+0x310>)
 8000b48:	fb82 1203 	smull	r1, r2, r2, r3
 8000b4c:	1152      	asrs	r2, r2, #5
 8000b4e:	17db      	asrs	r3, r3, #31
 8000b50:	1ad2      	subs	r2, r2, r3
 8000b52:	4b9f      	ldr	r3, [pc, #636]	; (8000dd0 <main+0x314>)
 8000b54:	fb83 1302 	smull	r1, r3, r3, r2
 8000b58:	1099      	asrs	r1, r3, #2
 8000b5a:	17d3      	asrs	r3, r2, #31
 8000b5c:	1ac9      	subs	r1, r1, r3
 8000b5e:	460b      	mov	r3, r1
 8000b60:	009b      	lsls	r3, r3, #2
 8000b62:	440b      	add	r3, r1
 8000b64:	005b      	lsls	r3, r3, #1
 8000b66:	1ad1      	subs	r1, r2, r3
 8000b68:	b2ca      	uxtb	r2, r1
 8000b6a:	4b9a      	ldr	r3, [pc, #616]	; (8000dd4 <main+0x318>)
 8000b6c:	701a      	strb	r2, [r3, #0]
					  				temp3 = ((un/10)%10); //3 - 3rd digit
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a97      	ldr	r2, [pc, #604]	; (8000dd0 <main+0x314>)
 8000b72:	fb82 1203 	smull	r1, r2, r2, r3
 8000b76:	1092      	asrs	r2, r2, #2
 8000b78:	17db      	asrs	r3, r3, #31
 8000b7a:	1ad2      	subs	r2, r2, r3
 8000b7c:	4b94      	ldr	r3, [pc, #592]	; (8000dd0 <main+0x314>)
 8000b7e:	fb83 1302 	smull	r1, r3, r3, r2
 8000b82:	1099      	asrs	r1, r3, #2
 8000b84:	17d3      	asrs	r3, r2, #31
 8000b86:	1ac9      	subs	r1, r1, r3
 8000b88:	460b      	mov	r3, r1
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	1ad1      	subs	r1, r2, r3
 8000b92:	b2ca      	uxtb	r2, r1
 8000b94:	4b90      	ldr	r3, [pc, #576]	; (8000dd8 <main+0x31c>)
 8000b96:	701a      	strb	r2, [r3, #0]
					  				temp4 = (un%10); //4 - 4th digit
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	4b8d      	ldr	r3, [pc, #564]	; (8000dd0 <main+0x314>)
 8000b9c:	fb83 1302 	smull	r1, r3, r3, r2
 8000ba0:	1099      	asrs	r1, r3, #2
 8000ba2:	17d3      	asrs	r3, r2, #31
 8000ba4:	1ac9      	subs	r1, r1, r3
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	440b      	add	r3, r1
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	1ad1      	subs	r1, r2, r3
 8000bb0:	b2ca      	uxtb	r2, r1
 8000bb2:	4b8a      	ldr	r3, [pc, #552]	; (8000ddc <main+0x320>)
 8000bb4:	701a      	strb	r2, [r3, #0]


					  				SevenSegment_Update(segmentNumber[temp1]);
 8000bb6:	4b84      	ldr	r3, [pc, #528]	; (8000dc8 <main+0x30c>)
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b88      	ldr	r3, [pc, #544]	; (8000de0 <main+0x324>)
 8000bbe:	5c9b      	ldrb	r3, [r3, r2]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff ff1f 	bl	8000a04 <SevenSegment_Update>
					  				D1_LOW();
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4886      	ldr	r0, [pc, #536]	; (8000de4 <main+0x328>)
 8000bcc:	f001 f9fe 	bl	8001fcc <HAL_GPIO_WritePin>
					  				HAL_Delay(1);
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f000 ff3b 	bl	8001a4c <HAL_Delay>
					  				D1_HIGH();
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4882      	ldr	r0, [pc, #520]	; (8000de4 <main+0x328>)
 8000bdc:	f001 f9f6 	bl	8001fcc <HAL_GPIO_WritePin>
					  				SevenSegment_Update(segmentNumber[temp2]);
 8000be0:	4b7c      	ldr	r3, [pc, #496]	; (8000dd4 <main+0x318>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b7e      	ldr	r3, [pc, #504]	; (8000de0 <main+0x324>)
 8000be8:	5c9b      	ldrb	r3, [r3, r2]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff0a 	bl	8000a04 <SevenSegment_Update>
					  				D2_LOW();
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	2102      	movs	r1, #2
 8000bf4:	487b      	ldr	r0, [pc, #492]	; (8000de4 <main+0x328>)
 8000bf6:	f001 f9e9 	bl	8001fcc <HAL_GPIO_WritePin>
					  				HAL_Delay(1);
 8000bfa:	2001      	movs	r0, #1
 8000bfc:	f000 ff26 	bl	8001a4c <HAL_Delay>
					  				D2_HIGH();
 8000c00:	2201      	movs	r2, #1
 8000c02:	2102      	movs	r1, #2
 8000c04:	4877      	ldr	r0, [pc, #476]	; (8000de4 <main+0x328>)
 8000c06:	f001 f9e1 	bl	8001fcc <HAL_GPIO_WritePin>
					  				SevenSegment_Update(segmentNumber[temp3]);
 8000c0a:	4b73      	ldr	r3, [pc, #460]	; (8000dd8 <main+0x31c>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4b73      	ldr	r3, [pc, #460]	; (8000de0 <main+0x324>)
 8000c12:	5c9b      	ldrb	r3, [r3, r2]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff fef5 	bl	8000a04 <SevenSegment_Update>
					  				D3_LOW();
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2120      	movs	r1, #32
 8000c1e:	4871      	ldr	r0, [pc, #452]	; (8000de4 <main+0x328>)
 8000c20:	f001 f9d4 	bl	8001fcc <HAL_GPIO_WritePin>
					  				HAL_Delay(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f000 ff11 	bl	8001a4c <HAL_Delay>
					  				D3_HIGH();
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2120      	movs	r1, #32
 8000c2e:	486d      	ldr	r0, [pc, #436]	; (8000de4 <main+0x328>)
 8000c30:	f001 f9cc 	bl	8001fcc <HAL_GPIO_WritePin>
					  				SevenSegment_Update(segmentNumber[temp4]);
 8000c34:	4b69      	ldr	r3, [pc, #420]	; (8000ddc <main+0x320>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b69      	ldr	r3, [pc, #420]	; (8000de0 <main+0x324>)
 8000c3c:	5c9b      	ldrb	r3, [r3, r2]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fee0 	bl	8000a04 <SevenSegment_Update>
					  				D4_LOW();
 8000c44:	2200      	movs	r2, #0
 8000c46:	2110      	movs	r1, #16
 8000c48:	4866      	ldr	r0, [pc, #408]	; (8000de4 <main+0x328>)
 8000c4a:	f001 f9bf 	bl	8001fcc <HAL_GPIO_WritePin>
					  				HAL_Delay(1);
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f000 fefc 	bl	8001a4c <HAL_Delay>
					  				D4_HIGH();
 8000c54:	2201      	movs	r2, #1
 8000c56:	2110      	movs	r1, #16
 8000c58:	4862      	ldr	r0, [pc, #392]	; (8000de4 <main+0x328>)
 8000c5a:	f001 f9b7 	bl	8001fcc <HAL_GPIO_WritePin>
 8000c5e:	e09a      	b.n	8000d96 <main+0x2da>
					  	}
		else {
							temp1 = counter/1000; //1 - 1st digit
 8000c60:	4b57      	ldr	r3, [pc, #348]	; (8000dc0 <main+0x304>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a57      	ldr	r2, [pc, #348]	; (8000dc4 <main+0x308>)
 8000c66:	fb82 1203 	smull	r1, r2, r2, r3
 8000c6a:	1192      	asrs	r2, r2, #6
 8000c6c:	17db      	asrs	r3, r3, #31
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4b55      	ldr	r3, [pc, #340]	; (8000dc8 <main+0x30c>)
 8000c74:	701a      	strb	r2, [r3, #0]
						  	  temp2 = ((counter/100)%10); //2 - 2nd digit
 8000c76:	4b52      	ldr	r3, [pc, #328]	; (8000dc0 <main+0x304>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a54      	ldr	r2, [pc, #336]	; (8000dcc <main+0x310>)
 8000c7c:	fb82 1203 	smull	r1, r2, r2, r3
 8000c80:	1152      	asrs	r2, r2, #5
 8000c82:	17db      	asrs	r3, r3, #31
 8000c84:	1ad2      	subs	r2, r2, r3
 8000c86:	4b52      	ldr	r3, [pc, #328]	; (8000dd0 <main+0x314>)
 8000c88:	fb83 1302 	smull	r1, r3, r3, r2
 8000c8c:	1099      	asrs	r1, r3, #2
 8000c8e:	17d3      	asrs	r3, r2, #31
 8000c90:	1ac9      	subs	r1, r1, r3
 8000c92:	460b      	mov	r3, r1
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	440b      	add	r3, r1
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	1ad1      	subs	r1, r2, r3
 8000c9c:	b2ca      	uxtb	r2, r1
 8000c9e:	4b4d      	ldr	r3, [pc, #308]	; (8000dd4 <main+0x318>)
 8000ca0:	701a      	strb	r2, [r3, #0]
						  	  temp3 = ((counter/10)%10); //3 - 3rd digit
 8000ca2:	4b47      	ldr	r3, [pc, #284]	; (8000dc0 <main+0x304>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a4a      	ldr	r2, [pc, #296]	; (8000dd0 <main+0x314>)
 8000ca8:	fb82 1203 	smull	r1, r2, r2, r3
 8000cac:	1092      	asrs	r2, r2, #2
 8000cae:	17db      	asrs	r3, r3, #31
 8000cb0:	1ad2      	subs	r2, r2, r3
 8000cb2:	4b47      	ldr	r3, [pc, #284]	; (8000dd0 <main+0x314>)
 8000cb4:	fb83 1302 	smull	r1, r3, r3, r2
 8000cb8:	1099      	asrs	r1, r3, #2
 8000cba:	17d3      	asrs	r3, r2, #31
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	009b      	lsls	r3, r3, #2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	1ad1      	subs	r1, r2, r3
 8000cc8:	b2ca      	uxtb	r2, r1
 8000cca:	4b43      	ldr	r3, [pc, #268]	; (8000dd8 <main+0x31c>)
 8000ccc:	701a      	strb	r2, [r3, #0]
						  	  temp4 = (counter%10); //4 - 4th digit
 8000cce:	4b3c      	ldr	r3, [pc, #240]	; (8000dc0 <main+0x304>)
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	4b3f      	ldr	r3, [pc, #252]	; (8000dd0 <main+0x314>)
 8000cd4:	fb83 1302 	smull	r1, r3, r3, r2
 8000cd8:	1099      	asrs	r1, r3, #2
 8000cda:	17d3      	asrs	r3, r2, #31
 8000cdc:	1ac9      	subs	r1, r1, r3
 8000cde:	460b      	mov	r3, r1
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	440b      	add	r3, r1
 8000ce4:	005b      	lsls	r3, r3, #1
 8000ce6:	1ad1      	subs	r1, r2, r3
 8000ce8:	b2ca      	uxtb	r2, r1
 8000cea:	4b3c      	ldr	r3, [pc, #240]	; (8000ddc <main+0x320>)
 8000cec:	701a      	strb	r2, [r3, #0]

						  	  SevenSegment_Update(segmentNumber[temp1]);
 8000cee:	4b36      	ldr	r3, [pc, #216]	; (8000dc8 <main+0x30c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4b3a      	ldr	r3, [pc, #232]	; (8000de0 <main+0x324>)
 8000cf6:	5c9b      	ldrb	r3, [r3, r2]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe83 	bl	8000a04 <SevenSegment_Update>
						  	  D1_LOW();
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2101      	movs	r1, #1
 8000d02:	4838      	ldr	r0, [pc, #224]	; (8000de4 <main+0x328>)
 8000d04:	f001 f962 	bl	8001fcc <HAL_GPIO_WritePin>
						  	  HAL_Delay(1);
 8000d08:	2001      	movs	r0, #1
 8000d0a:	f000 fe9f 	bl	8001a4c <HAL_Delay>
						  	  D1_HIGH();
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2101      	movs	r1, #1
 8000d12:	4834      	ldr	r0, [pc, #208]	; (8000de4 <main+0x328>)
 8000d14:	f001 f95a 	bl	8001fcc <HAL_GPIO_WritePin>

						  	  SevenSegment_Update(segmentNumber[temp2]);
 8000d18:	4b2e      	ldr	r3, [pc, #184]	; (8000dd4 <main+0x318>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	461a      	mov	r2, r3
 8000d1e:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <main+0x324>)
 8000d20:	5c9b      	ldrb	r3, [r3, r2]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fe6e 	bl	8000a04 <SevenSegment_Update>
						  	  D2_LOW();
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2102      	movs	r1, #2
 8000d2c:	482d      	ldr	r0, [pc, #180]	; (8000de4 <main+0x328>)
 8000d2e:	f001 f94d 	bl	8001fcc <HAL_GPIO_WritePin>
						  	  HAL_Delay(1);
 8000d32:	2001      	movs	r0, #1
 8000d34:	f000 fe8a 	bl	8001a4c <HAL_Delay>
						  	  D2_HIGH();
 8000d38:	2201      	movs	r2, #1
 8000d3a:	2102      	movs	r1, #2
 8000d3c:	4829      	ldr	r0, [pc, #164]	; (8000de4 <main+0x328>)
 8000d3e:	f001 f945 	bl	8001fcc <HAL_GPIO_WritePin>

						  	  SevenSegment_Update(segmentNumber[temp3]);
 8000d42:	4b25      	ldr	r3, [pc, #148]	; (8000dd8 <main+0x31c>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b25      	ldr	r3, [pc, #148]	; (8000de0 <main+0x324>)
 8000d4a:	5c9b      	ldrb	r3, [r3, r2]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fe59 	bl	8000a04 <SevenSegment_Update>
						  	  D3_LOW();
 8000d52:	2200      	movs	r2, #0
 8000d54:	2120      	movs	r1, #32
 8000d56:	4823      	ldr	r0, [pc, #140]	; (8000de4 <main+0x328>)
 8000d58:	f001 f938 	bl	8001fcc <HAL_GPIO_WritePin>
						  	  HAL_Delay(1);
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f000 fe75 	bl	8001a4c <HAL_Delay>
						  	  D3_HIGH();
 8000d62:	2201      	movs	r2, #1
 8000d64:	2120      	movs	r1, #32
 8000d66:	481f      	ldr	r0, [pc, #124]	; (8000de4 <main+0x328>)
 8000d68:	f001 f930 	bl	8001fcc <HAL_GPIO_WritePin>

						  	  SevenSegment_Update(segmentNumber[temp4]);
 8000d6c:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <main+0x320>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <main+0x324>)
 8000d74:	5c9b      	ldrb	r3, [r3, r2]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fe44 	bl	8000a04 <SevenSegment_Update>
						  	  D4_LOW();
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4818      	ldr	r0, [pc, #96]	; (8000de4 <main+0x328>)
 8000d82:	f001 f923 	bl	8001fcc <HAL_GPIO_WritePin>
						  	  HAL_Delay(1);
 8000d86:	2001      	movs	r0, #1
 8000d88:	f000 fe60 	bl	8001a4c <HAL_Delay>
						  	  D4_HIGH();
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2110      	movs	r1, #16
 8000d90:	4814      	ldr	r0, [pc, #80]	; (8000de4 <main+0x328>)
 8000d92:	f001 f91b 	bl	8001fcc <HAL_GPIO_WritePin>
		}




		if(touche==1){
 8000d96:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <main+0x32c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d104      	bne.n	8000da8 <main+0x2ec>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);  // Start PWM motor
 8000d9e:	2104      	movs	r1, #4
 8000da0:	4812      	ldr	r0, [pc, #72]	; (8000dec <main+0x330>)
 8000da2:	f002 fe15 	bl	80039d0 <HAL_TIM_PWM_Start>
 8000da6:	e6a6      	b.n	8000af6 <main+0x3a>
		}
		else{
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);  // Start PWM motor
 8000da8:	2104      	movs	r1, #4
 8000daa:	4810      	ldr	r0, [pc, #64]	; (8000dec <main+0x330>)
 8000dac:	f002 fef6 	bl	8003b9c <HAL_TIM_PWM_Stop>
 8000db0:	e6a1      	b.n	8000af6 <main+0x3a>
 8000db2:	bf00      	nop
 8000db4:	20000088 	.word	0x20000088
 8000db8:	200000d4 	.word	0x200000d4
 8000dbc:	20000000 	.word	0x20000000
 8000dc0:	20000004 	.word	0x20000004
 8000dc4:	10624dd3 	.word	0x10624dd3
 8000dc8:	20000178 	.word	0x20000178
 8000dcc:	51eb851f 	.word	0x51eb851f
 8000dd0:	66666667 	.word	0x66666667
 8000dd4:	20000179 	.word	0x20000179
 8000dd8:	2000017a 	.word	0x2000017a
 8000ddc:	2000017b 	.word	0x2000017b
 8000de0:	20000008 	.word	0x20000008
 8000de4:	48000400 	.word	0x48000400
 8000de8:	20000140 	.word	0x20000140
 8000dec:	2000003c 	.word	0x2000003c
		}

	}
	else{
		int zero=0000;
 8000df0:	2300      	movs	r3, #0
 8000df2:	60bb      	str	r3, [r7, #8]
		temp1 = zero/1000; //1 - 1st digit
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4a4d      	ldr	r2, [pc, #308]	; (8000f2c <main+0x470>)
 8000df8:	fb82 1203 	smull	r1, r2, r2, r3
 8000dfc:	1192      	asrs	r2, r2, #6
 8000dfe:	17db      	asrs	r3, r3, #31
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b4a      	ldr	r3, [pc, #296]	; (8000f30 <main+0x474>)
 8000e06:	701a      	strb	r2, [r3, #0]
		temp2 = ((zero/100)%10); //2 - 2nd digit
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	4a4a      	ldr	r2, [pc, #296]	; (8000f34 <main+0x478>)
 8000e0c:	fb82 1203 	smull	r1, r2, r2, r3
 8000e10:	1152      	asrs	r2, r2, #5
 8000e12:	17db      	asrs	r3, r3, #31
 8000e14:	1ad2      	subs	r2, r2, r3
 8000e16:	4b48      	ldr	r3, [pc, #288]	; (8000f38 <main+0x47c>)
 8000e18:	fb83 1302 	smull	r1, r3, r3, r2
 8000e1c:	1099      	asrs	r1, r3, #2
 8000e1e:	17d3      	asrs	r3, r2, #31
 8000e20:	1ac9      	subs	r1, r1, r3
 8000e22:	460b      	mov	r3, r1
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	440b      	add	r3, r1
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	1ad1      	subs	r1, r2, r3
 8000e2c:	b2ca      	uxtb	r2, r1
 8000e2e:	4b43      	ldr	r3, [pc, #268]	; (8000f3c <main+0x480>)
 8000e30:	701a      	strb	r2, [r3, #0]
		temp3 = ((zero/10)%10); //3 - 3rd digit
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	4a40      	ldr	r2, [pc, #256]	; (8000f38 <main+0x47c>)
 8000e36:	fb82 1203 	smull	r1, r2, r2, r3
 8000e3a:	1092      	asrs	r2, r2, #2
 8000e3c:	17db      	asrs	r3, r3, #31
 8000e3e:	1ad2      	subs	r2, r2, r3
 8000e40:	4b3d      	ldr	r3, [pc, #244]	; (8000f38 <main+0x47c>)
 8000e42:	fb83 1302 	smull	r1, r3, r3, r2
 8000e46:	1099      	asrs	r1, r3, #2
 8000e48:	17d3      	asrs	r3, r2, #31
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	440b      	add	r3, r1
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	1ad1      	subs	r1, r2, r3
 8000e56:	b2ca      	uxtb	r2, r1
 8000e58:	4b39      	ldr	r3, [pc, #228]	; (8000f40 <main+0x484>)
 8000e5a:	701a      	strb	r2, [r3, #0]
		temp4 = (zero%10); //4 - 4th digit
 8000e5c:	68ba      	ldr	r2, [r7, #8]
 8000e5e:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <main+0x47c>)
 8000e60:	fb83 1302 	smull	r1, r3, r3, r2
 8000e64:	1099      	asrs	r1, r3, #2
 8000e66:	17d3      	asrs	r3, r2, #31
 8000e68:	1ac9      	subs	r1, r1, r3
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	440b      	add	r3, r1
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	1ad1      	subs	r1, r2, r3
 8000e74:	b2ca      	uxtb	r2, r1
 8000e76:	4b33      	ldr	r3, [pc, #204]	; (8000f44 <main+0x488>)
 8000e78:	701a      	strb	r2, [r3, #0]


		SevenSegment_Update(segmentNumber[temp1]);
 8000e7a:	4b2d      	ldr	r3, [pc, #180]	; (8000f30 <main+0x474>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	4b31      	ldr	r3, [pc, #196]	; (8000f48 <main+0x48c>)
 8000e82:	5c9b      	ldrb	r3, [r3, r2]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff fdbd 	bl	8000a04 <SevenSegment_Update>
		D1_LOW();
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	482f      	ldr	r0, [pc, #188]	; (8000f4c <main+0x490>)
 8000e90:	f001 f89c 	bl	8001fcc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f000 fdd9 	bl	8001a4c <HAL_Delay>
		D1_HIGH();
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	482b      	ldr	r0, [pc, #172]	; (8000f4c <main+0x490>)
 8000ea0:	f001 f894 	bl	8001fcc <HAL_GPIO_WritePin>
		SevenSegment_Update(segmentNumber[temp2]);
 8000ea4:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <main+0x480>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <main+0x48c>)
 8000eac:	5c9b      	ldrb	r3, [r3, r2]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fda8 	bl	8000a04 <SevenSegment_Update>
		D2_LOW();
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	4824      	ldr	r0, [pc, #144]	; (8000f4c <main+0x490>)
 8000eba:	f001 f887 	bl	8001fcc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f000 fdc4 	bl	8001a4c <HAL_Delay>
		D2_HIGH();
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	4820      	ldr	r0, [pc, #128]	; (8000f4c <main+0x490>)
 8000eca:	f001 f87f 	bl	8001fcc <HAL_GPIO_WritePin>
		SevenSegment_Update(segmentNumber[temp3]);
 8000ece:	4b1c      	ldr	r3, [pc, #112]	; (8000f40 <main+0x484>)
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <main+0x48c>)
 8000ed6:	5c9b      	ldrb	r3, [r3, r2]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff fd93 	bl	8000a04 <SevenSegment_Update>
		D3_LOW();
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2120      	movs	r1, #32
 8000ee2:	481a      	ldr	r0, [pc, #104]	; (8000f4c <main+0x490>)
 8000ee4:	f001 f872 	bl	8001fcc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 fdaf 	bl	8001a4c <HAL_Delay>
		D3_HIGH();
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2120      	movs	r1, #32
 8000ef2:	4816      	ldr	r0, [pc, #88]	; (8000f4c <main+0x490>)
 8000ef4:	f001 f86a 	bl	8001fcc <HAL_GPIO_WritePin>
		SevenSegment_Update(segmentNumber[temp4]);
 8000ef8:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <main+0x488>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b12      	ldr	r3, [pc, #72]	; (8000f48 <main+0x48c>)
 8000f00:	5c9b      	ldrb	r3, [r3, r2]
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fd7e 	bl	8000a04 <SevenSegment_Update>
		D4_LOW();
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	480f      	ldr	r0, [pc, #60]	; (8000f4c <main+0x490>)
 8000f0e:	f001 f85d 	bl	8001fcc <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 fd9a 	bl	8001a4c <HAL_Delay>
		D4_HIGH();
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	480b      	ldr	r0, [pc, #44]	; (8000f4c <main+0x490>)
 8000f1e:	f001 f855 	bl	8001fcc <HAL_GPIO_WritePin>

		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000f22:	2104      	movs	r1, #4
 8000f24:	480a      	ldr	r0, [pc, #40]	; (8000f50 <main+0x494>)
 8000f26:	f002 fe39 	bl	8003b9c <HAL_TIM_PWM_Stop>
  {
 8000f2a:	e5e4      	b.n	8000af6 <main+0x3a>
 8000f2c:	10624dd3 	.word	0x10624dd3
 8000f30:	20000178 	.word	0x20000178
 8000f34:	51eb851f 	.word	0x51eb851f
 8000f38:	66666667 	.word	0x66666667
 8000f3c:	20000179 	.word	0x20000179
 8000f40:	2000017a 	.word	0x2000017a
 8000f44:	2000017b 	.word	0x2000017b
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	48000400 	.word	0x48000400
 8000f50:	2000003c 	.word	0x2000003c

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b09c      	sub	sp, #112	; 0x70
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f5e:	2228      	movs	r2, #40	; 0x28
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f004 f9f0 	bl	8005348 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	2230      	movs	r2, #48	; 0x30
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f004 f9e2 	bl	8005348 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f8c:	2310      	movs	r3, #16
 8000f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f90:	2302      	movs	r3, #2
 8000f92:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f94:	2300      	movs	r3, #0
 8000f96:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f98:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f9e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 f82a 	bl	8001ffc <HAL_RCC_OscConfig>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000fae:	f000 fb5b 	bl	8001668 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb2:	230f      	movs	r3, #15
 8000fb4:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fcc:	2102      	movs	r1, #2
 8000fce:	4618      	mov	r0, r3
 8000fd0:	f002 f852 	bl	8003078 <HAL_RCC_ClockConfig>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000fda:	f000 fb45 	bl	8001668 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM16;
 8000fde:	f44f 2301 	mov.w	r3, #528384	; 0x81000
 8000fe2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fa5c 	bl	80034ac <HAL_RCCEx_PeriphCLKConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000ffa:	f000 fb35 	bl	8001668 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001004:	2000      	movs	r0, #0
 8001006:	f002 f9b3 	bl	8003370 <HAL_RCC_MCOConfig>
}
 800100a:	bf00      	nop
 800100c:	3770      	adds	r7, #112	; 0x70
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b09a      	sub	sp, #104	; 0x68
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800101a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001028:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001034:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
 8001044:	615a      	str	r2, [r3, #20]
 8001046:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001048:	1d3b      	adds	r3, r7, #4
 800104a:	222c      	movs	r2, #44	; 0x2c
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f004 f97a 	bl	8005348 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001054:	4b44      	ldr	r3, [pc, #272]	; (8001168 <MX_TIM1_Init+0x154>)
 8001056:	4a45      	ldr	r2, [pc, #276]	; (800116c <MX_TIM1_Init+0x158>)
 8001058:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 800105a:	4b43      	ldr	r3, [pc, #268]	; (8001168 <MX_TIM1_Init+0x154>)
 800105c:	223f      	movs	r2, #63	; 0x3f
 800105e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b41      	ldr	r3, [pc, #260]	; (8001168 <MX_TIM1_Init+0x154>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001066:	4b40      	ldr	r3, [pc, #256]	; (8001168 <MX_TIM1_Init+0x154>)
 8001068:	f240 32e7 	movw	r2, #999	; 0x3e7
 800106c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800106e:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <MX_TIM1_Init+0x154>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001074:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <MX_TIM1_Init+0x154>)
 8001076:	2200      	movs	r2, #0
 8001078:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800107a:	4b3b      	ldr	r3, [pc, #236]	; (8001168 <MX_TIM1_Init+0x154>)
 800107c:	2280      	movs	r2, #128	; 0x80
 800107e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001080:	4839      	ldr	r0, [pc, #228]	; (8001168 <MX_TIM1_Init+0x154>)
 8001082:	f002 fb97 	bl	80037b4 <HAL_TIM_Base_Init>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800108c:	f000 faec 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001094:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001096:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800109a:	4619      	mov	r1, r3
 800109c:	4832      	ldr	r0, [pc, #200]	; (8001168 <MX_TIM1_Init+0x154>)
 800109e:	f003 fa6b 	bl	8004578 <HAL_TIM_ConfigClockSource>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80010a8:	f000 fade 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010ac:	482e      	ldr	r0, [pc, #184]	; (8001168 <MX_TIM1_Init+0x154>)
 80010ae:	f002 fc2d 	bl	800390c <HAL_TIM_PWM_Init>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80010b8:	f000 fad6 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010bc:	2300      	movs	r3, #0
 80010be:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010c0:	2300      	movs	r3, #0
 80010c2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010cc:	4619      	mov	r1, r3
 80010ce:	4826      	ldr	r0, [pc, #152]	; (8001168 <MX_TIM1_Init+0x154>)
 80010d0:	f004 f81a 	bl	8005108 <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80010da:	f000 fac5 	bl	8001668 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010de:	2360      	movs	r3, #96	; 0x60
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 450;
 80010e2:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
 80010e6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010e8:	2300      	movs	r3, #0
 80010ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ec:	2300      	movs	r3, #0
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010f8:	2300      	movs	r3, #0
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001100:	2204      	movs	r2, #4
 8001102:	4619      	mov	r1, r3
 8001104:	4818      	ldr	r0, [pc, #96]	; (8001168 <MX_TIM1_Init+0x154>)
 8001106:	f003 f923 	bl	8004350 <HAL_TIM_PWM_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001110:	f000 faaa 	bl	8001668 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800111c:	2300      	movs	r3, #0
 800111e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001128:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800112c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800113a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	4619      	mov	r1, r3
 8001148:	4807      	ldr	r0, [pc, #28]	; (8001168 <MX_TIM1_Init+0x154>)
 800114a:	f004 f843 	bl	80051d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8001154:	f000 fa88 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001158:	4803      	ldr	r0, [pc, #12]	; (8001168 <MX_TIM1_Init+0x154>)
 800115a:	f000 fb53 	bl	8001804 <HAL_TIM_MspPostInit>

}
 800115e:	bf00      	nop
 8001160:	3768      	adds	r7, #104	; 0x68
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000003c 	.word	0x2000003c
 800116c:	40012c00 	.word	0x40012c00

08001170 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08c      	sub	sp, #48	; 0x30
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <MX_TIM2_Init+0xdc>)
 800119e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80011a4:	4b29      	ldr	r3, [pc, #164]	; (800124c <MX_TIM2_Init+0xdc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011aa:	4b28      	ldr	r3, [pc, #160]	; (800124c <MX_TIM2_Init+0xdc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <MX_TIM2_Init+0xdc>)
 80011b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <MX_TIM2_Init+0xdc>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011be:	4b23      	ldr	r3, [pc, #140]	; (800124c <MX_TIM2_Init+0xdc>)
 80011c0:	2280      	movs	r2, #128	; 0x80
 80011c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011c4:	4821      	ldr	r0, [pc, #132]	; (800124c <MX_TIM2_Init+0xdc>)
 80011c6:	f002 faf5 	bl	80037b4 <HAL_TIM_Base_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80011d0:	f000 fa4a 	bl	8001668 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011da:	f107 0320 	add.w	r3, r7, #32
 80011de:	4619      	mov	r1, r3
 80011e0:	481a      	ldr	r0, [pc, #104]	; (800124c <MX_TIM2_Init+0xdc>)
 80011e2:	f003 f9c9 	bl	8004578 <HAL_TIM_ConfigClockSource>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80011ec:	f000 fa3c 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80011f0:	4816      	ldr	r0, [pc, #88]	; (800124c <MX_TIM2_Init+0xdc>)
 80011f2:	f002 fd61 	bl	8003cb8 <HAL_TIM_IC_Init>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80011fc:	f000 fa34 	bl	8001668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	4619      	mov	r1, r3
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <MX_TIM2_Init+0xdc>)
 8001210:	f003 ff7a 	bl	8005108 <HAL_TIMEx_MasterConfigSynchronization>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800121a:	f000 fa25 	bl	8001668 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001222:	2301      	movs	r3, #1
 8001224:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	2200      	movs	r2, #0
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_TIM2_Init+0xdc>)
 8001236:	f002 ffee 	bl	8004216 <HAL_TIM_IC_ConfigChannel>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001240:	f000 fa12 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	3730      	adds	r7, #48	; 0x30
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000088 	.word	0x20000088

08001250 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001262:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <MX_TIM16_Init+0x8c>)
 8001264:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <MX_TIM16_Init+0x90>)
 8001266:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 63;
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <MX_TIM16_Init+0x8c>)
 800126a:	223f      	movs	r2, #63	; 0x3f
 800126c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <MX_TIM16_Init+0x8c>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8001274:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_TIM16_Init+0x8c>)
 8001276:	f240 32e7 	movw	r2, #999	; 0x3e7
 800127a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b17      	ldr	r3, [pc, #92]	; (80012dc <MX_TIM16_Init+0x8c>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_TIM16_Init+0x8c>)
 8001284:	2200      	movs	r2, #0
 8001286:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_TIM16_Init+0x8c>)
 800128a:	2280      	movs	r2, #128	; 0x80
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800128e:	4813      	ldr	r0, [pc, #76]	; (80012dc <MX_TIM16_Init+0x8c>)
 8001290:	f002 fa90 	bl	80037b4 <HAL_TIM_Base_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM16_Init+0x4e>
  {
    Error_Handler();
 800129a:	f000 f9e5 	bl	8001668 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim16) != HAL_OK)
 800129e:	480f      	ldr	r0, [pc, #60]	; (80012dc <MX_TIM16_Init+0x8c>)
 80012a0:	f002 fd0a 	bl	8003cb8 <HAL_TIM_IC_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 80012aa:	f000 f9dd 	bl	8001668 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012ae:	2300      	movs	r3, #0
 80012b0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012b2:	2301      	movs	r3, #1
 80012b4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim16, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	2200      	movs	r2, #0
 80012c2:	4619      	mov	r1, r3
 80012c4:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_TIM16_Init+0x8c>)
 80012c6:	f002 ffa6 	bl	8004216 <HAL_TIM_IC_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 80012d0:	f000 f9ca 	bl	8001668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200000d4 	.word	0x200000d4
 80012e0:	40014400 	.word	0x40014400

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b088      	sub	sp, #32
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 030c 	add.w	r3, r7, #12
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012fa:	4b38      	ldr	r3, [pc, #224]	; (80013dc <MX_GPIO_Init+0xf8>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a37      	ldr	r2, [pc, #220]	; (80013dc <MX_GPIO_Init+0xf8>)
 8001300:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001304:	6153      	str	r3, [r2, #20]
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <MX_GPIO_Init+0xf8>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001312:	4b32      	ldr	r3, [pc, #200]	; (80013dc <MX_GPIO_Init+0xf8>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	4a31      	ldr	r2, [pc, #196]	; (80013dc <MX_GPIO_Init+0xf8>)
 8001318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800131c:	6153      	str	r3, [r2, #20]
 800131e:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <MX_GPIO_Init+0xf8>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800132a:	4b2c      	ldr	r3, [pc, #176]	; (80013dc <MX_GPIO_Init+0xf8>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a2b      	ldr	r2, [pc, #172]	; (80013dc <MX_GPIO_Init+0xf8>)
 8001330:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001334:	6153      	str	r3, [r2, #20]
 8001336:	4b29      	ldr	r3, [pc, #164]	; (80013dc <MX_GPIO_Init+0xf8>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800133e:	603b      	str	r3, [r7, #0]
 8001340:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001342:	2200      	movs	r2, #0
 8001344:	21fe      	movs	r1, #254	; 0xfe
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f000 fe3f 	bl	8001fcc <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	2133      	movs	r1, #51	; 0x33
 8001352:	4823      	ldr	r0, [pc, #140]	; (80013e0 <MX_GPIO_Init+0xfc>)
 8001354:	f000 fe3a 	bl	8001fcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4
                           PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001358:	23fe      	movs	r3, #254	; 0xfe
 800135a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800135c:	2301      	movs	r3, #1
 800135e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	4619      	mov	r1, r3
 800136e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001372:	f000 fca1 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001376:	2333      	movs	r3, #51	; 0x33
 8001378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137a:	2301      	movs	r3, #1
 800137c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001386:	f107 030c 	add.w	r3, r7, #12
 800138a:	4619      	mov	r1, r3
 800138c:	4814      	ldr	r0, [pc, #80]	; (80013e0 <MX_GPIO_Init+0xfc>)
 800138e:	f000 fc93 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001392:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	4619      	mov	r1, r3
 80013ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b2:	f000 fc81 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80013b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013bc:	2300      	movs	r3, #0
 80013be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80013c0:	2302      	movs	r3, #2
 80013c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c4:	f107 030c 	add.w	r3, r7, #12
 80013c8:	4619      	mov	r1, r3
 80013ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ce:	f000 fc73 	bl	8001cb8 <HAL_GPIO_Init>

}
 80013d2:	bf00      	nop
 80013d4:	3720      	adds	r7, #32
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40021000 	.word	0x40021000
 80013e0:	48000400 	.word	0x48000400
 80013e4:	00000000 	.word	0x00000000

080013e8 <calcul_capa>:

/* USER CODE BEGIN 4 */
void calcul_capa(void) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

	capa = 1/(0.0024*moving_avg_freq*0.001 - 0.0081);
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <calcul_capa+0x78>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f84d 	bl	8000490 <__aeabi_f2d>
 80013f6:	a314      	add	r3, pc, #80	; (adr r3, 8001448 <calcul_capa+0x60>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f8a0 	bl	8000540 <__aeabi_dmul>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	a311      	add	r3, pc, #68	; (adr r3, 8001450 <calcul_capa+0x68>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7ff f897 	bl	8000540 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4610      	mov	r0, r2
 8001418:	4619      	mov	r1, r3
 800141a:	a30f      	add	r3, pc, #60	; (adr r3, 8001458 <calcul_capa+0x70>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7fe fed6 	bl	80001d0 <__aeabi_dsub>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	f04f 0000 	mov.w	r0, #0
 800142c:	490d      	ldr	r1, [pc, #52]	; (8001464 <calcul_capa+0x7c>)
 800142e:	f7ff f9b1 	bl	8000794 <__aeabi_ddiv>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fa93 	bl	8000964 <__aeabi_d2f>
 800143e:	4603      	mov	r3, r0
 8001440:	4a09      	ldr	r2, [pc, #36]	; (8001468 <calcul_capa+0x80>)
 8001442:	6013      	str	r3, [r2, #0]

}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}
 8001448:	30553261 	.word	0x30553261
 800144c:	3f63a92a 	.word	0x3f63a92a
 8001450:	d2f1a9fc 	.word	0xd2f1a9fc
 8001454:	3f50624d 	.word	0x3f50624d
 8001458:	98c7e282 	.word	0x98c7e282
 800145c:	3f8096bb 	.word	0x3f8096bb
 8001460:	20000124 	.word	0x20000124
 8001464:	3ff00000 	.word	0x3ff00000
 8001468:	20000120 	.word	0x20000120

0800146c <moving_average>:
float moving_average(uint32_t new_freq) {
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
    static uint32_t index = 0;  // Index de l'échantillon courant
    freq_sum += new_freq - freq_list[index];
 8001474:	4b19      	ldr	r3, [pc, #100]	; (80014dc <moving_average+0x70>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <moving_average+0x74>)
 800147a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	1ad2      	subs	r2, r2, r3
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <moving_average+0x78>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a16      	ldr	r2, [pc, #88]	; (80014e4 <moving_average+0x78>)
 800148a:	6013      	str	r3, [r2, #0]
    freq_list[index] = new_freq;
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <moving_average+0x70>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4913      	ldr	r1, [pc, #76]	; (80014e0 <moving_average+0x74>)
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    index = (index + 1) % SAMPLE_SIZE;  // Incrémenter l'index et le ramener à 0 si nécessaire
 8001498:	4b10      	ldr	r3, [pc, #64]	; (80014dc <moving_average+0x70>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	1c59      	adds	r1, r3, #1
 800149e:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <moving_average+0x7c>)
 80014a0:	fba3 2301 	umull	r2, r3, r3, r1
 80014a4:	08da      	lsrs	r2, r3, #3
 80014a6:	4613      	mov	r3, r2
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	1aca      	subs	r2, r1, r3
 80014b0:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <moving_average+0x70>)
 80014b2:	601a      	str	r2, [r3, #0]
    return (float)freq_sum / (float)SAMPLE_SIZE;  // Retourner la moyenne glissante
 80014b4:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <moving_average+0x78>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	ee07 3a90 	vmov	s15, r3
 80014bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014c8:	eef0 7a66 	vmov.f32	s15, s13
}
 80014cc:	eeb0 0a67 	vmov.f32	s0, s15
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	2000017c 	.word	0x2000017c
 80014e0:	2000014c 	.word	0x2000014c
 80014e4:	20000174 	.word	0x20000174
 80014e8:	cccccccd 	.word	0xcccccccd

080014ec <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
	if(gu8_State == IDLE)
 80014f4:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10b      	bne.n	8001516 <HAL_TIM_IC_CaptureCallback+0x2a>
	    {
	        gu32_T1 = TIM2->CCR1;
 80014fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001504:	4a2c      	ldr	r2, [pc, #176]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001506:	6013      	str	r3, [r2, #0]
	        gu16_TIM2_OVC = 0;
 8001508:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <HAL_TIM_IC_CaptureCallback+0xd0>)
 800150a:	2200      	movs	r2, #0
 800150c:	801a      	strh	r2, [r3, #0]
	        gu8_State = DONE;
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001510:	2201      	movs	r2, #1
 8001512:	701a      	strb	r2, [r3, #0]
	        }
	        gu8_State = IDLE;
	    }


}
 8001514:	e04a      	b.n	80015ac <HAL_TIM_IC_CaptureCallback+0xc0>
	    else if(gu8_State == DONE)
 8001516:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b01      	cmp	r3, #1
 800151e:	d145      	bne.n	80015ac <HAL_TIM_IC_CaptureCallback+0xc0>
	        gu32_T2 = TIM2->CCR1;
 8001520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001526:	4a26      	ldr	r2, [pc, #152]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001528:	6013      	str	r3, [r2, #0]
	        gu32_Ticks = (gu32_T2 + (gu16_TIM2_OVC*65536)) - gu32_T1;
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <HAL_TIM_IC_CaptureCallback+0xd0>)
 800152c:	881b      	ldrh	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	041b      	lsls	r3, r3, #16
 8001532:	461a      	mov	r2, r3
 8001534:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	441a      	add	r2, r3
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <HAL_TIM_IC_CaptureCallback+0xcc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	4a20      	ldr	r2, [pc, #128]	; (80015c4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001542:	6013      	str	r3, [r2, #0]
	        gu32_Freq = (uint32_t)(F_CLK/gu32_Ticks);
 8001544:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <HAL_TIM_IC_CaptureCallback+0xdc>)
 800154a:	fbb2 f3f3 	udiv	r3, r2, r3
 800154e:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001550:	6013      	str	r3, [r2, #0]
	        if(gu32_Freq != 0)
 8001552:	4b1e      	ldr	r3, [pc, #120]	; (80015cc <HAL_TIM_IC_CaptureCallback+0xe0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d025      	beq.n	80015a6 <HAL_TIM_IC_CaptureCallback+0xba>
	          moving_avg_freq = moving_average(gu32_Freq);
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <HAL_TIM_IC_CaptureCallback+0xe0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff ff84 	bl	800146c <moving_average>
 8001564:	eef0 7a40 	vmov.f32	s15, s0
 8001568:	4b19      	ldr	r3, [pc, #100]	; (80015d0 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800156a:	edc3 7a00 	vstr	s15, [r3]
	          if(moving_avg_freq<20000){
 800156e:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80015d4 <HAL_TIM_IC_CaptureCallback+0xe8>
 8001578:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001580:	d511      	bpl.n	80015a6 <HAL_TIM_IC_CaptureCallback+0xba>
	          		if(count>1000){
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0xec>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800158a:	dd0c      	ble.n	80015a6 <HAL_TIM_IC_CaptureCallback+0xba>
	          			touche= !touche;
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <HAL_TIM_IC_CaptureCallback+0xf0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf0c      	ite	eq
 8001594:	2301      	moveq	r3, #1
 8001596:	2300      	movne	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <HAL_TIM_IC_CaptureCallback+0xf0>)
 800159e:	601a      	str	r2, [r3, #0]
	          			count=0;
 80015a0:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0xec>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
	        gu8_State = IDLE;
 80015a6:	4b03      	ldr	r3, [pc, #12]	; (80015b4 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000128 	.word	0x20000128
 80015b8:	2000012c 	.word	0x2000012c
 80015bc:	20000138 	.word	0x20000138
 80015c0:	20000130 	.word	0x20000130
 80015c4:	20000134 	.word	0x20000134
 80015c8:	03d09000 	.word	0x03d09000
 80015cc:	2000013c 	.word	0x2000013c
 80015d0:	20000124 	.word	0x20000124
 80015d4:	469c4000 	.word	0x469c4000
 80015d8:	20000144 	.word	0x20000144
 80015dc:	20000140 	.word	0x20000140

080015e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

    if (htim->Instance == TIM2) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015f0:	d106      	bne.n	8001600 <HAL_TIM_PeriodElapsedCallback+0x20>
    	gu16_TIM2_OVC++;
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80015f4:	881b      	ldrh	r3, [r3, #0]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	3301      	adds	r3, #1
 80015fa:	b29a      	uxth	r2, r3
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80015fe:	801a      	strh	r2, [r3, #0]
    }
    if(htim->Instance == TIM16){
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a14      	ldr	r2, [pc, #80]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d11d      	bne.n	8001646 <HAL_TIM_PeriodElapsedCallback+0x66>
    	count++;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	3301      	adds	r3, #1
 8001610:	4a12      	ldr	r2, [pc, #72]	; (800165c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001612:	6013      	str	r3, [r2, #0]
    	cnt_sec++;
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	4a11      	ldr	r2, [pc, #68]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800161c:	6013      	str	r3, [r2, #0]
    	if(cnt_sec==1000){
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001626:	d107      	bne.n	8001638 <HAL_TIM_PeriodElapsedCallback+0x58>
    		counter = counter -1 ;
 8001628:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	3b01      	subs	r3, #1
 800162e:	4a0d      	ldr	r2, [pc, #52]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001630:	6013      	str	r3, [r2, #0]
    		cnt_sec=0;
 8001632:	4b0b      	ldr	r3, [pc, #44]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
    	}
    	if(counter<=0){
 8001638:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x84>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	dc02      	bgt.n	8001646 <HAL_TIM_PeriodElapsedCallback+0x66>
    		counter=0;
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
    	}
    }

}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000138 	.word	0x20000138
 8001658:	40014400 	.word	0x40014400
 800165c:	20000144 	.word	0x20000144
 8001660:	20000148 	.word	0x20000148
 8001664:	20000004 	.word	0x20000004

08001668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166c:	b672      	cpsid	i
}
 800166e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001670:	e7fe      	b.n	8001670 <Error_Handler+0x8>
	...

08001674 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_MspInit+0x50>)
 800167c:	699b      	ldr	r3, [r3, #24]
 800167e:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <HAL_MspInit+0x50>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6193      	str	r3, [r2, #24]
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_MspInit+0x50>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_MspInit+0x50>)
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_MspInit+0x50>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	61d3      	str	r3, [r2, #28]
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_MspInit+0x50>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2100      	movs	r1, #0
 80016ae:	2005      	movs	r0, #5
 80016b0:	f000 facb 	bl	8001c4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80016b4:	2005      	movs	r0, #5
 80016b6:	f000 fae4 	bl	8001c82 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08c      	sub	sp, #48	; 0x30
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 031c 	add.w	r3, r7, #28
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a44      	ldr	r2, [pc, #272]	; (80017f8 <HAL_TIM_Base_MspInit+0x130>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d114      	bne.n	8001714 <HAL_TIM_Base_MspInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ea:	4b44      	ldr	r3, [pc, #272]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	4a43      	ldr	r2, [pc, #268]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 80016f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016f4:	6193      	str	r3, [r2, #24]
 80016f6:	4b41      	ldr	r3, [pc, #260]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016fe:	61bb      	str	r3, [r7, #24]
 8001700:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	2019      	movs	r0, #25
 8001708:	f000 fa9f 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800170c:	2019      	movs	r0, #25
 800170e:	f000 fab8 	bl	8001c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001712:	e06d      	b.n	80017f0 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171c:	d131      	bne.n	8001782 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	4a36      	ldr	r2, [pc, #216]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	61d3      	str	r3, [r2, #28]
 800172a:	4b34      	ldr	r3, [pc, #208]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	4b31      	ldr	r3, [pc, #196]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 8001738:	695b      	ldr	r3, [r3, #20]
 800173a:	4a30      	ldr	r2, [pc, #192]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 800173c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001740:	6153      	str	r3, [r2, #20]
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800174e:	2301      	movs	r3, #1
 8001750:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800175e:	2301      	movs	r3, #1
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176c:	f000 faa4 	bl	8001cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2100      	movs	r1, #0
 8001774:	201c      	movs	r0, #28
 8001776:	f000 fa68 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800177a:	201c      	movs	r0, #28
 800177c:	f000 fa81 	bl	8001c82 <HAL_NVIC_EnableIRQ>
}
 8001780:	e036      	b.n	80017f0 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM16)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a1e      	ldr	r2, [pc, #120]	; (8001800 <HAL_TIM_Base_MspInit+0x138>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d131      	bne.n	80017f0 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	4a1a      	ldr	r2, [pc, #104]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 8001792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001796:	6193      	str	r3, [r2, #24]
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 80017aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ae:	6153      	str	r3, [r2, #20]
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_TIM_Base_MspInit+0x134>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80017bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 80017ce:	2301      	movs	r3, #1
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017dc:	f000 fa6c 	bl	8001cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2100      	movs	r1, #0
 80017e4:	2019      	movs	r0, #25
 80017e6:	f000 fa30 	bl	8001c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80017ea:	2019      	movs	r0, #25
 80017ec:	f000 fa49 	bl	8001c82 <HAL_NVIC_EnableIRQ>
}
 80017f0:	bf00      	nop
 80017f2:	3730      	adds	r7, #48	; 0x30
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40012c00 	.word	0x40012c00
 80017fc:	40021000 	.word	0x40021000
 8001800:	40014400 	.word	0x40014400

08001804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 030c 	add.w	r3, r7, #12
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a12      	ldr	r2, [pc, #72]	; (800186c <HAL_TIM_MspPostInit+0x68>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d11d      	bne.n	8001862 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <HAL_TIM_MspPostInit+0x6c>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	4a11      	ldr	r2, [pc, #68]	; (8001870 <HAL_TIM_MspPostInit+0x6c>)
 800182c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001830:	6153      	str	r3, [r2, #20]
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_TIM_MspPostInit+0x6c>)
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800183e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001842:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001850:	2306      	movs	r3, #6
 8001852:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	4619      	mov	r1, r3
 800185a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185e:	f000 fa2b 	bl	8001cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001862:	bf00      	nop
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40012c00 	.word	0x40012c00
 8001870:	40021000 	.word	0x40021000

08001874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001878:	e7fe      	b.n	8001878 <NMI_Handler+0x4>

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c0:	f000 f8a4 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018dc:	4803      	ldr	r0, [pc, #12]	; (80018ec <TIM1_UP_TIM16_IRQHandler+0x14>)
 80018de:	f002 fb7b 	bl	8003fd8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80018e2:	4803      	ldr	r0, [pc, #12]	; (80018f0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80018e4:	f002 fb78 	bl	8003fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	2000003c 	.word	0x2000003c
 80018f0:	200000d4 	.word	0x200000d4

080018f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <TIM2_IRQHandler+0x10>)
 80018fa:	f002 fb6d 	bl	8003fd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000088 	.word	0x20000088

08001908 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <SystemInit+0x20>)
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001912:	4a05      	ldr	r2, [pc, #20]	; (8001928 <SystemInit+0x20>)
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000ed00 	.word	0xe000ed00

0800192c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800192c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001964 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001930:	480d      	ldr	r0, [pc, #52]	; (8001968 <LoopForever+0x6>)
  ldr r1, =_edata
 8001932:	490e      	ldr	r1, [pc, #56]	; (800196c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001934:	4a0e      	ldr	r2, [pc, #56]	; (8001970 <LoopForever+0xe>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001938:	e002      	b.n	8001940 <LoopCopyDataInit>

0800193a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800193c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193e:	3304      	adds	r3, #4

08001940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001944:	d3f9      	bcc.n	800193a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001948:	4c0b      	ldr	r4, [pc, #44]	; (8001978 <LoopForever+0x16>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800194c:	e001      	b.n	8001952 <LoopFillZerobss>

0800194e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001950:	3204      	adds	r2, #4

08001952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001954:	d3fb      	bcc.n	800194e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001956:	f7ff ffd7 	bl	8001908 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800195a:	f003 fcd1 	bl	8005300 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800195e:	f7ff f8ad 	bl	8000abc <main>

08001962 <LoopForever>:

LoopForever:
    b LoopForever
 8001962:	e7fe      	b.n	8001962 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001964:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001968:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800196c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001970:	080053a8 	.word	0x080053a8
  ldr r2, =_sbss
 8001974:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001978:	20000184 	.word	0x20000184

0800197c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800197c:	e7fe      	b.n	800197c <ADC1_IRQHandler>
	...

08001980 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_Init+0x28>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <HAL_Init+0x28>)
 800198a:	f043 0310 	orr.w	r3, r3, #16
 800198e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001990:	2003      	movs	r0, #3
 8001992:	f000 f94f 	bl	8001c34 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001996:	200f      	movs	r0, #15
 8001998:	f000 f808 	bl	80019ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800199c:	f7ff fe6a 	bl	8001674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40022000 	.word	0x40022000

080019ac <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x54>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x58>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f967 	bl	8001c9e <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f000 f92f 	bl	8001c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	; (8001a08 <HAL_InitTick+0x5c>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	20000014 	.word	0x20000014
 8001a04:	2000001c 	.word	0x2000001c
 8001a08:	20000018 	.word	0x20000018

08001a0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	2000001c 	.word	0x2000001c
 8001a30:	20000180 	.word	0x20000180

08001a34 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;  
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20000180 	.word	0x20000180

08001a4c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff ffee 	bl	8001a34 <HAL_GetTick>
 8001a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d005      	beq.n	8001a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a66:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <HAL_Delay+0x44>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a72:	bf00      	nop
 8001a74:	f7ff ffde 	bl	8001a34 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d8f7      	bhi.n	8001a74 <HAL_Delay+0x28>
  {
  }
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000001c 	.word	0x2000001c

08001a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aaa:	68ba      	ldr	r2, [r7, #8]
 8001aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac6:	4a04      	ldr	r2, [pc, #16]	; (8001ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	60d3      	str	r3, [r2, #12]
}
 8001acc:	bf00      	nop
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	0a1b      	lsrs	r3, r3, #8
 8001ae6:	f003 0307 	and.w	r3, r3, #7
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	db0b      	blt.n	8001b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	f003 021f 	and.w	r2, r3, #31
 8001b10:	4907      	ldr	r1, [pc, #28]	; (8001b30 <__NVIC_EnableIRQ+0x38>)
 8001b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b16:	095b      	lsrs	r3, r3, #5
 8001b18:	2001      	movs	r0, #1
 8001b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000e100 	.word	0xe000e100

08001b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	6039      	str	r1, [r7, #0]
 8001b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	db0a      	blt.n	8001b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	490c      	ldr	r1, [pc, #48]	; (8001b80 <__NVIC_SetPriority+0x4c>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	0112      	lsls	r2, r2, #4
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b5c:	e00a      	b.n	8001b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4908      	ldr	r1, [pc, #32]	; (8001b84 <__NVIC_SetPriority+0x50>)
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	3b04      	subs	r3, #4
 8001b6c:	0112      	lsls	r2, r2, #4
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	440b      	add	r3, r1
 8001b72:	761a      	strb	r2, [r3, #24]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000e100 	.word	0xe000e100
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	; 0x24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	bf28      	it	cs
 8001ba6:	2304      	movcs	r3, #4
 8001ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3304      	adds	r3, #4
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d902      	bls.n	8001bb8 <NVIC_EncodePriority+0x30>
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3b03      	subs	r3, #3
 8001bb6:	e000      	b.n	8001bba <NVIC_EncodePriority+0x32>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	401a      	ands	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	43d9      	mvns	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	4313      	orrs	r3, r2
         );
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3724      	adds	r7, #36	; 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c00:	d301      	bcc.n	8001c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c02:	2301      	movs	r3, #1
 8001c04:	e00f      	b.n	8001c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <SysTick_Config+0x40>)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0e:	210f      	movs	r1, #15
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	f7ff ff8e 	bl	8001b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c18:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <SysTick_Config+0x40>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <SysTick_Config+0x40>)
 8001c20:	2207      	movs	r2, #7
 8001c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	e000e010 	.word	0xe000e010

08001c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b082      	sub	sp, #8
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f7ff ff29 	bl	8001a94 <__NVIC_SetPriorityGrouping>
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b086      	sub	sp, #24
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	60b9      	str	r1, [r7, #8]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c5c:	f7ff ff3e 	bl	8001adc <__NVIC_GetPriorityGrouping>
 8001c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f7ff ff8e 	bl	8001b88 <NVIC_EncodePriority>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c72:	4611      	mov	r1, r2
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff5d 	bl	8001b34 <__NVIC_SetPriority>
}
 8001c7a:	bf00      	nop
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	4603      	mov	r3, r0
 8001c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff31 	bl	8001af8 <__NVIC_EnableIRQ>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff ffa2 	bl	8001bf0 <SysTick_Config>
 8001cac:	4603      	mov	r3, r0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc6:	e14e      	b.n	8001f66 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2101      	movs	r1, #1
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	f000 8140 	beq.w	8001f60 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d005      	beq.n	8001cf8 <HAL_GPIO_Init+0x40>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d130      	bne.n	8001d5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d2e:	2201      	movs	r2, #1
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	f003 0201 	and.w	r2, r3, #1
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	693a      	ldr	r2, [r7, #16]
 8001d58:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d017      	beq.n	8001d96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	2203      	movs	r2, #3
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	689a      	ldr	r2, [r3, #8]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f003 0303 	and.w	r3, r3, #3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d123      	bne.n	8001dea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	08da      	lsrs	r2, r3, #3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3208      	adds	r2, #8
 8001de4:	6939      	ldr	r1, [r7, #16]
 8001de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	2203      	movs	r2, #3
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f003 0203 	and.w	r2, r3, #3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f000 809a 	beq.w	8001f60 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2c:	4b55      	ldr	r3, [pc, #340]	; (8001f84 <HAL_GPIO_Init+0x2cc>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a54      	ldr	r2, [pc, #336]	; (8001f84 <HAL_GPIO_Init+0x2cc>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b52      	ldr	r3, [pc, #328]	; (8001f84 <HAL_GPIO_Init+0x2cc>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	60bb      	str	r3, [r7, #8]
 8001e42:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e44:	4a50      	ldr	r2, [pc, #320]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	089b      	lsrs	r3, r3, #2
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e6e:	d013      	beq.n	8001e98 <HAL_GPIO_Init+0x1e0>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a46      	ldr	r2, [pc, #280]	; (8001f8c <HAL_GPIO_Init+0x2d4>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d00d      	beq.n	8001e94 <HAL_GPIO_Init+0x1dc>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a45      	ldr	r2, [pc, #276]	; (8001f90 <HAL_GPIO_Init+0x2d8>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d007      	beq.n	8001e90 <HAL_GPIO_Init+0x1d8>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a44      	ldr	r2, [pc, #272]	; (8001f94 <HAL_GPIO_Init+0x2dc>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d101      	bne.n	8001e8c <HAL_GPIO_Init+0x1d4>
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e006      	b.n	8001e9a <HAL_GPIO_Init+0x1e2>
 8001e8c:	2305      	movs	r3, #5
 8001e8e:	e004      	b.n	8001e9a <HAL_GPIO_Init+0x1e2>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e002      	b.n	8001e9a <HAL_GPIO_Init+0x1e2>
 8001e94:	2301      	movs	r3, #1
 8001e96:	e000      	b.n	8001e9a <HAL_GPIO_Init+0x1e2>
 8001e98:	2300      	movs	r3, #0
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	f002 0203 	and.w	r2, r2, #3
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	4093      	lsls	r3, r2
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001eaa:	4937      	ldr	r1, [pc, #220]	; (8001f88 <HAL_GPIO_Init+0x2d0>)
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb8:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <HAL_GPIO_Init+0x2e0>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001edc:	4a2e      	ldr	r2, [pc, #184]	; (8001f98 <HAL_GPIO_Init+0x2e0>)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ee2:	4b2d      	ldr	r3, [pc, #180]	; (8001f98 <HAL_GPIO_Init+0x2e0>)
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	43db      	mvns	r3, r3
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001f06:	4a24      	ldr	r2, [pc, #144]	; (8001f98 <HAL_GPIO_Init+0x2e0>)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0c:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <HAL_GPIO_Init+0x2e0>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d003      	beq.n	8001f30 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001f30:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <HAL_GPIO_Init+0x2e0>)
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f36:	4b18      	ldr	r3, [pc, #96]	; (8001f98 <HAL_GPIO_Init+0x2e0>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	43db      	mvns	r3, r3
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4013      	ands	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d003      	beq.n	8001f5a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001f52:	693a      	ldr	r2, [r7, #16]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001f5a:	4a0f      	ldr	r2, [pc, #60]	; (8001f98 <HAL_GPIO_Init+0x2e0>)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	3301      	adds	r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f47f aea9 	bne.w	8001cc8 <HAL_GPIO_Init+0x10>
  }
}
 8001f76:	bf00      	nop
 8001f78:	bf00      	nop
 8001f7a:	371c      	adds	r7, #28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	48000400 	.word	0x48000400
 8001f90:	48000800 	.word	0x48000800
 8001f94:	48000c00 	.word	0x48000c00
 8001f98:	40010400 	.word	0x40010400

08001f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	887b      	ldrh	r3, [r7, #2]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	73fb      	strb	r3, [r7, #15]
 8001fb8:	e001      	b.n	8001fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fdc:	787b      	ldrb	r3, [r7, #1]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fe8:	e002      	b.n	8001ff0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fea:	887a      	ldrh	r2, [r7, #2]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002002:	af00      	add	r7, sp, #0
 8002004:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002008:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800200c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800200e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002012:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d102      	bne.n	8002022 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	f001 b823 	b.w	8003068 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002022:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002026:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 817d 	beq.w	8002332 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002038:	4bbc      	ldr	r3, [pc, #752]	; (800232c <HAL_RCC_OscConfig+0x330>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 030c 	and.w	r3, r3, #12
 8002040:	2b04      	cmp	r3, #4
 8002042:	d00c      	beq.n	800205e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002044:	4bb9      	ldr	r3, [pc, #740]	; (800232c <HAL_RCC_OscConfig+0x330>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f003 030c 	and.w	r3, r3, #12
 800204c:	2b08      	cmp	r3, #8
 800204e:	d15c      	bne.n	800210a <HAL_RCC_OscConfig+0x10e>
 8002050:	4bb6      	ldr	r3, [pc, #728]	; (800232c <HAL_RCC_OscConfig+0x330>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800205c:	d155      	bne.n	800210a <HAL_RCC_OscConfig+0x10e>
 800205e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002062:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800206a:	fa93 f3a3 	rbit	r3, r3
 800206e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002072:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002076:	fab3 f383 	clz	r3, r3
 800207a:	b2db      	uxtb	r3, r3
 800207c:	095b      	lsrs	r3, r3, #5
 800207e:	b2db      	uxtb	r3, r3
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b01      	cmp	r3, #1
 8002088:	d102      	bne.n	8002090 <HAL_RCC_OscConfig+0x94>
 800208a:	4ba8      	ldr	r3, [pc, #672]	; (800232c <HAL_RCC_OscConfig+0x330>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	e015      	b.n	80020bc <HAL_RCC_OscConfig+0xc0>
 8002090:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002094:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80020a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80020a8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80020ac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80020b0:	fa93 f3a3 	rbit	r3, r3
 80020b4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80020b8:	4b9c      	ldr	r3, [pc, #624]	; (800232c <HAL_RCC_OscConfig+0x330>)
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80020c0:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80020c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80020c8:	fa92 f2a2 	rbit	r2, r2
 80020cc:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80020d0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80020d4:	fab2 f282 	clz	r2, r2
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	f042 0220 	orr.w	r2, r2, #32
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	f002 021f 	and.w	r2, r2, #31
 80020e4:	2101      	movs	r1, #1
 80020e6:	fa01 f202 	lsl.w	r2, r1, r2
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 811f 	beq.w	8002330 <HAL_RCC_OscConfig+0x334>
 80020f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f040 8116 	bne.w	8002330 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	f000 bfaf 	b.w	8003068 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800210a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800210e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211a:	d106      	bne.n	800212a <HAL_RCC_OscConfig+0x12e>
 800211c:	4b83      	ldr	r3, [pc, #524]	; (800232c <HAL_RCC_OscConfig+0x330>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a82      	ldr	r2, [pc, #520]	; (800232c <HAL_RCC_OscConfig+0x330>)
 8002122:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002126:	6013      	str	r3, [r2, #0]
 8002128:	e036      	b.n	8002198 <HAL_RCC_OscConfig+0x19c>
 800212a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800212e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0x158>
 800213a:	4b7c      	ldr	r3, [pc, #496]	; (800232c <HAL_RCC_OscConfig+0x330>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a7b      	ldr	r2, [pc, #492]	; (800232c <HAL_RCC_OscConfig+0x330>)
 8002140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b79      	ldr	r3, [pc, #484]	; (800232c <HAL_RCC_OscConfig+0x330>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a78      	ldr	r2, [pc, #480]	; (800232c <HAL_RCC_OscConfig+0x330>)
 800214c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e021      	b.n	8002198 <HAL_RCC_OscConfig+0x19c>
 8002154:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002158:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x184>
 8002166:	4b71      	ldr	r3, [pc, #452]	; (800232c <HAL_RCC_OscConfig+0x330>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a70      	ldr	r2, [pc, #448]	; (800232c <HAL_RCC_OscConfig+0x330>)
 800216c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	4b6e      	ldr	r3, [pc, #440]	; (800232c <HAL_RCC_OscConfig+0x330>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a6d      	ldr	r2, [pc, #436]	; (800232c <HAL_RCC_OscConfig+0x330>)
 8002178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217c:	6013      	str	r3, [r2, #0]
 800217e:	e00b      	b.n	8002198 <HAL_RCC_OscConfig+0x19c>
 8002180:	4b6a      	ldr	r3, [pc, #424]	; (800232c <HAL_RCC_OscConfig+0x330>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a69      	ldr	r2, [pc, #420]	; (800232c <HAL_RCC_OscConfig+0x330>)
 8002186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4b67      	ldr	r3, [pc, #412]	; (800232c <HAL_RCC_OscConfig+0x330>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a66      	ldr	r2, [pc, #408]	; (800232c <HAL_RCC_OscConfig+0x330>)
 8002192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002196:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002198:	4b64      	ldr	r3, [pc, #400]	; (800232c <HAL_RCC_OscConfig+0x330>)
 800219a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219c:	f023 020f 	bic.w	r2, r3, #15
 80021a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	495f      	ldr	r1, [pc, #380]	; (800232c <HAL_RCC_OscConfig+0x330>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d059      	beq.n	8002276 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c2:	f7ff fc37 	bl	8001a34 <HAL_GetTick>
 80021c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021cc:	f7ff fc32 	bl	8001a34 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b64      	cmp	r3, #100	; 0x64
 80021da:	d902      	bls.n	80021e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	f000 bf43 	b.w	8003068 <HAL_RCC_OscConfig+0x106c>
 80021e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021e6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80021ee:	fa93 f3a3 	rbit	r3, r3
 80021f2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80021f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021fa:	fab3 f383 	clz	r3, r3
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	095b      	lsrs	r3, r3, #5
 8002202:	b2db      	uxtb	r3, r3
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <HAL_RCC_OscConfig+0x218>
 800220e:	4b47      	ldr	r3, [pc, #284]	; (800232c <HAL_RCC_OscConfig+0x330>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	e015      	b.n	8002240 <HAL_RCC_OscConfig+0x244>
 8002214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002218:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002228:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800222c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002230:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002234:	fa93 f3a3 	rbit	r3, r3
 8002238:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800223c:	4b3b      	ldr	r3, [pc, #236]	; (800232c <HAL_RCC_OscConfig+0x330>)
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002244:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002248:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800224c:	fa92 f2a2 	rbit	r2, r2
 8002250:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002254:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002258:	fab2 f282 	clz	r2, r2
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	f042 0220 	orr.w	r2, r2, #32
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	f002 021f 	and.w	r2, r2, #31
 8002268:	2101      	movs	r1, #1
 800226a:	fa01 f202 	lsl.w	r2, r1, r2
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ab      	beq.n	80021cc <HAL_RCC_OscConfig+0x1d0>
 8002274:	e05d      	b.n	8002332 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002276:	f7ff fbdd 	bl	8001a34 <HAL_GetTick>
 800227a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	e00a      	b.n	8002296 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002280:	f7ff fbd8 	bl	8001a34 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	2b64      	cmp	r3, #100	; 0x64
 800228e:	d902      	bls.n	8002296 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002290:	2303      	movs	r3, #3
 8002292:	f000 bee9 	b.w	8003068 <HAL_RCC_OscConfig+0x106c>
 8002296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800229a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80022aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ae:	fab3 f383 	clz	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	f043 0301 	orr.w	r3, r3, #1
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d102      	bne.n	80022c8 <HAL_RCC_OscConfig+0x2cc>
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <HAL_RCC_OscConfig+0x330>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	e015      	b.n	80022f4 <HAL_RCC_OscConfig+0x2f8>
 80022c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022cc:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80022d4:	fa93 f3a3 	rbit	r3, r3
 80022d8:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80022dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022e0:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80022e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_RCC_OscConfig+0x330>)
 80022f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80022f8:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80022fc:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002300:	fa92 f2a2 	rbit	r2, r2
 8002304:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002308:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800230c:	fab2 f282 	clz	r2, r2
 8002310:	b2d2      	uxtb	r2, r2
 8002312:	f042 0220 	orr.w	r2, r2, #32
 8002316:	b2d2      	uxtb	r2, r2
 8002318:	f002 021f 	and.w	r2, r2, #31
 800231c:	2101      	movs	r1, #1
 800231e:	fa01 f202 	lsl.w	r2, r1, r2
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ab      	bne.n	8002280 <HAL_RCC_OscConfig+0x284>
 8002328:	e003      	b.n	8002332 <HAL_RCC_OscConfig+0x336>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002332:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002336:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 817d 	beq.w	8002642 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002348:	4ba6      	ldr	r3, [pc, #664]	; (80025e4 <HAL_RCC_OscConfig+0x5e8>)
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 030c 	and.w	r3, r3, #12
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00b      	beq.n	800236c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002354:	4ba3      	ldr	r3, [pc, #652]	; (80025e4 <HAL_RCC_OscConfig+0x5e8>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d172      	bne.n	8002446 <HAL_RCC_OscConfig+0x44a>
 8002360:	4ba0      	ldr	r3, [pc, #640]	; (80025e4 <HAL_RCC_OscConfig+0x5e8>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d16c      	bne.n	8002446 <HAL_RCC_OscConfig+0x44a>
 800236c:	2302      	movs	r3, #2
 800236e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002372:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002376:	fa93 f3a3 	rbit	r3, r3
 800237a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800237e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	095b      	lsrs	r3, r3, #5
 800238a:	b2db      	uxtb	r3, r3
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d102      	bne.n	800239c <HAL_RCC_OscConfig+0x3a0>
 8002396:	4b93      	ldr	r3, [pc, #588]	; (80025e4 <HAL_RCC_OscConfig+0x5e8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	e013      	b.n	80023c4 <HAL_RCC_OscConfig+0x3c8>
 800239c:	2302      	movs	r3, #2
 800239e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80023ae:	2302      	movs	r3, #2
 80023b0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80023b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80023c0:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x5e8>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	2202      	movs	r2, #2
 80023c6:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80023ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80023ce:	fa92 f2a2 	rbit	r2, r2
 80023d2:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80023d6:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80023da:	fab2 f282 	clz	r2, r2
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f042 0220 	orr.w	r2, r2, #32
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	f002 021f 	and.w	r2, r2, #31
 80023ea:	2101      	movs	r1, #1
 80023ec:	fa01 f202 	lsl.w	r2, r1, r2
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00a      	beq.n	800240c <HAL_RCC_OscConfig+0x410>
 80023f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d002      	beq.n	800240c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	f000 be2e 	b.w	8003068 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240c:	4b75      	ldr	r3, [pc, #468]	; (80025e4 <HAL_RCC_OscConfig+0x5e8>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002414:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002418:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	21f8      	movs	r1, #248	; 0xf8
 8002422:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002426:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800242a:	fa91 f1a1 	rbit	r1, r1
 800242e:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002432:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002436:	fab1 f181 	clz	r1, r1
 800243a:	b2c9      	uxtb	r1, r1
 800243c:	408b      	lsls	r3, r1
 800243e:	4969      	ldr	r1, [pc, #420]	; (80025e4 <HAL_RCC_OscConfig+0x5e8>)
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002444:	e0fd      	b.n	8002642 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 8088 	beq.w	8002568 <HAL_RCC_OscConfig+0x56c>
 8002458:	2301      	movs	r3, #1
 800245a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002462:	fa93 f3a3 	rbit	r3, r3
 8002466:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800246a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800246e:	fab3 f383 	clz	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002478:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	461a      	mov	r2, r3
 8002480:	2301      	movs	r3, #1
 8002482:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7ff fad6 	bl	8001a34 <HAL_GetTick>
 8002488:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800248e:	f7ff fad1 	bl	8001a34 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d902      	bls.n	80024a4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	f000 bde2 	b.w	8003068 <HAL_RCC_OscConfig+0x106c>
 80024a4:	2302      	movs	r3, #2
 80024a6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80024ae:	fa93 f3a3 	rbit	r3, r3
 80024b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80024b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d102      	bne.n	80024d4 <HAL_RCC_OscConfig+0x4d8>
 80024ce:	4b45      	ldr	r3, [pc, #276]	; (80025e4 <HAL_RCC_OscConfig+0x5e8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	e013      	b.n	80024fc <HAL_RCC_OscConfig+0x500>
 80024d4:	2302      	movs	r3, #2
 80024d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80024de:	fa93 f3a3 	rbit	r3, r3
 80024e2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80024e6:	2302      	movs	r3, #2
 80024e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80024ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80024f8:	4b3a      	ldr	r3, [pc, #232]	; (80025e4 <HAL_RCC_OscConfig+0x5e8>)
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	2202      	movs	r2, #2
 80024fe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002502:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002506:	fa92 f2a2 	rbit	r2, r2
 800250a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800250e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002512:	fab2 f282 	clz	r2, r2
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	f042 0220 	orr.w	r2, r2, #32
 800251c:	b2d2      	uxtb	r2, r2
 800251e:	f002 021f 	and.w	r2, r2, #31
 8002522:	2101      	movs	r1, #1
 8002524:	fa01 f202 	lsl.w	r2, r1, r2
 8002528:	4013      	ands	r3, r2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0af      	beq.n	800248e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800252e:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_RCC_OscConfig+0x5e8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002536:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800253a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	21f8      	movs	r1, #248	; 0xf8
 8002544:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800254c:	fa91 f1a1 	rbit	r1, r1
 8002550:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002554:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002558:	fab1 f181 	clz	r1, r1
 800255c:	b2c9      	uxtb	r1, r1
 800255e:	408b      	lsls	r3, r1
 8002560:	4920      	ldr	r1, [pc, #128]	; (80025e4 <HAL_RCC_OscConfig+0x5e8>)
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]
 8002566:	e06c      	b.n	8002642 <HAL_RCC_OscConfig+0x646>
 8002568:	2301      	movs	r3, #1
 800256a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800257a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800257e:	fab3 f383 	clz	r3, r3
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002588:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	461a      	mov	r2, r3
 8002590:	2300      	movs	r3, #0
 8002592:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7ff fa4e 	bl	8001a34 <HAL_GetTick>
 8002598:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259e:	f7ff fa49 	bl	8001a34 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d902      	bls.n	80025b4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	f000 bd5a 	b.w	8003068 <HAL_RCC_OscConfig+0x106c>
 80025b4:	2302      	movs	r3, #2
 80025b6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80025c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	fab3 f383 	clz	r3, r3
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	095b      	lsrs	r3, r3, #5
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d104      	bne.n	80025e8 <HAL_RCC_OscConfig+0x5ec>
 80025de:	4b01      	ldr	r3, [pc, #4]	; (80025e4 <HAL_RCC_OscConfig+0x5e8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	e015      	b.n	8002610 <HAL_RCC_OscConfig+0x614>
 80025e4:	40021000 	.word	0x40021000
 80025e8:	2302      	movs	r3, #2
 80025ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80025f2:	fa93 f3a3 	rbit	r3, r3
 80025f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80025fa:	2302      	movs	r3, #2
 80025fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002600:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800260c:	4bc8      	ldr	r3, [pc, #800]	; (8002930 <HAL_RCC_OscConfig+0x934>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	2202      	movs	r2, #2
 8002612:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002616:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800261a:	fa92 f2a2 	rbit	r2, r2
 800261e:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002622:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002626:	fab2 f282 	clz	r2, r2
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	f042 0220 	orr.w	r2, r2, #32
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f002 021f 	and.w	r2, r2, #31
 8002636:	2101      	movs	r1, #1
 8002638:	fa01 f202 	lsl.w	r2, r1, r2
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1ad      	bne.n	800259e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002642:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002646:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8110 	beq.w	8002878 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d079      	beq.n	800275c <HAL_RCC_OscConfig+0x760>
 8002668:	2301      	movs	r3, #1
 800266a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002672:	fa93 f3a3 	rbit	r3, r3
 8002676:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800267a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267e:	fab3 f383 	clz	r3, r3
 8002682:	b2db      	uxtb	r3, r3
 8002684:	461a      	mov	r2, r3
 8002686:	4bab      	ldr	r3, [pc, #684]	; (8002934 <HAL_RCC_OscConfig+0x938>)
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	461a      	mov	r2, r3
 800268e:	2301      	movs	r3, #1
 8002690:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002692:	f7ff f9cf 	bl	8001a34 <HAL_GetTick>
 8002696:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800269c:	f7ff f9ca 	bl	8001a34 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d902      	bls.n	80026b2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	f000 bcdb 	b.w	8003068 <HAL_RCC_OscConfig+0x106c>
 80026b2:	2302      	movs	r3, #2
 80026b4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80026bc:	fa93 f3a3 	rbit	r3, r3
 80026c0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80026c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026cc:	2202      	movs	r2, #2
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	fa93 f2a3 	rbit	r2, r3
 80026de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026f0:	2202      	movs	r2, #2
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	fa93 f2a3 	rbit	r2, r3
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800270a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800270c:	4b88      	ldr	r3, [pc, #544]	; (8002930 <HAL_RCC_OscConfig+0x934>)
 800270e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002714:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002718:	2102      	movs	r1, #2
 800271a:	6019      	str	r1, [r3, #0]
 800271c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002720:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	fa93 f1a3 	rbit	r1, r3
 800272a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800272e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002732:	6019      	str	r1, [r3, #0]
  return result;
 8002734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002738:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f003 031f 	and.w	r3, r3, #31
 800274e:	2101      	movs	r1, #1
 8002750:	fa01 f303 	lsl.w	r3, r1, r3
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0a0      	beq.n	800269c <HAL_RCC_OscConfig+0x6a0>
 800275a:	e08d      	b.n	8002878 <HAL_RCC_OscConfig+0x87c>
 800275c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002760:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002764:	2201      	movs	r2, #1
 8002766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002768:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800276c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	fa93 f2a3 	rbit	r2, r3
 8002776:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800277a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800277e:	601a      	str	r2, [r3, #0]
  return result;
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002788:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278a:	fab3 f383 	clz	r3, r3
 800278e:	b2db      	uxtb	r3, r3
 8002790:	461a      	mov	r2, r3
 8002792:	4b68      	ldr	r3, [pc, #416]	; (8002934 <HAL_RCC_OscConfig+0x938>)
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	461a      	mov	r2, r3
 800279a:	2300      	movs	r3, #0
 800279c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279e:	f7ff f949 	bl	8001a34 <HAL_GetTick>
 80027a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a8:	f7ff f944 	bl	8001a34 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d902      	bls.n	80027be <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	f000 bc55 	b.w	8003068 <HAL_RCC_OscConfig+0x106c>
 80027be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027c2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027c6:	2202      	movs	r2, #2
 80027c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027ce:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	fa93 f2a3 	rbit	r2, r3
 80027d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027dc:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027ea:	2202      	movs	r2, #2
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	fa93 f2a3 	rbit	r2, r3
 80027fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002800:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800280a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800280e:	2202      	movs	r2, #2
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	fa93 f2a3 	rbit	r2, r3
 8002820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002824:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002828:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800282a:	4b41      	ldr	r3, [pc, #260]	; (8002930 <HAL_RCC_OscConfig+0x934>)
 800282c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002832:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002836:	2102      	movs	r1, #2
 8002838:	6019      	str	r1, [r3, #0]
 800283a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	fa93 f1a3 	rbit	r1, r3
 8002848:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800284c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002850:	6019      	str	r1, [r3, #0]
  return result;
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	fab3 f383 	clz	r3, r3
 8002860:	b2db      	uxtb	r3, r3
 8002862:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	2101      	movs	r1, #1
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	4013      	ands	r3, r2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d197      	bne.n	80027a8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002878:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800287c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 81a1 	beq.w	8002bd0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002894:	4b26      	ldr	r3, [pc, #152]	; (8002930 <HAL_RCC_OscConfig+0x934>)
 8002896:	69db      	ldr	r3, [r3, #28]
 8002898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d116      	bne.n	80028ce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a0:	4b23      	ldr	r3, [pc, #140]	; (8002930 <HAL_RCC_OscConfig+0x934>)
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	4a22      	ldr	r2, [pc, #136]	; (8002930 <HAL_RCC_OscConfig+0x934>)
 80028a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028aa:	61d3      	str	r3, [r2, #28]
 80028ac:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_RCC_OscConfig+0x934>)
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80028b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b8:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028bc:	601a      	str	r2, [r3, #0]
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80028c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028c8:	2301      	movs	r3, #1
 80028ca:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ce:	4b1a      	ldr	r3, [pc, #104]	; (8002938 <HAL_RCC_OscConfig+0x93c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d11a      	bne.n	8002910 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028da:	4b17      	ldr	r3, [pc, #92]	; (8002938 <HAL_RCC_OscConfig+0x93c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a16      	ldr	r2, [pc, #88]	; (8002938 <HAL_RCC_OscConfig+0x93c>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e6:	f7ff f8a5 	bl	8001a34 <HAL_GetTick>
 80028ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ee:	e009      	b.n	8002904 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f0:	f7ff f8a0 	bl	8001a34 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b64      	cmp	r3, #100	; 0x64
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e3b1      	b.n	8003068 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002904:	4b0c      	ldr	r3, [pc, #48]	; (8002938 <HAL_RCC_OscConfig+0x93c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ef      	beq.n	80028f0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d10d      	bne.n	800293c <HAL_RCC_OscConfig+0x940>
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_RCC_OscConfig+0x934>)
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4a02      	ldr	r2, [pc, #8]	; (8002930 <HAL_RCC_OscConfig+0x934>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6213      	str	r3, [r2, #32]
 800292c:	e03c      	b.n	80029a8 <HAL_RCC_OscConfig+0x9ac>
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	10908120 	.word	0x10908120
 8002938:	40007000 	.word	0x40007000
 800293c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002940:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10c      	bne.n	8002966 <HAL_RCC_OscConfig+0x96a>
 800294c:	4bc1      	ldr	r3, [pc, #772]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	4ac0      	ldr	r2, [pc, #768]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6213      	str	r3, [r2, #32]
 8002958:	4bbe      	ldr	r3, [pc, #760]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	4abd      	ldr	r2, [pc, #756]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 800295e:	f023 0304 	bic.w	r3, r3, #4
 8002962:	6213      	str	r3, [r2, #32]
 8002964:	e020      	b.n	80029a8 <HAL_RCC_OscConfig+0x9ac>
 8002966:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	2b05      	cmp	r3, #5
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x994>
 8002976:	4bb7      	ldr	r3, [pc, #732]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 8002978:	6a1b      	ldr	r3, [r3, #32]
 800297a:	4ab6      	ldr	r2, [pc, #728]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	6213      	str	r3, [r2, #32]
 8002982:	4bb4      	ldr	r3, [pc, #720]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	4ab3      	ldr	r2, [pc, #716]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6213      	str	r3, [r2, #32]
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0x9ac>
 8002990:	4bb0      	ldr	r3, [pc, #704]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	4aaf      	ldr	r2, [pc, #700]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	6213      	str	r3, [r2, #32]
 800299c:	4bad      	ldr	r3, [pc, #692]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	4aac      	ldr	r2, [pc, #688]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 80029a2:	f023 0304 	bic.w	r3, r3, #4
 80029a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8081 	beq.w	8002abc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7ff f83b 	bl	8001a34 <HAL_GetTick>
 80029be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c2:	e00b      	b.n	80029dc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029c4:	f7ff f836 	bl	8001a34 <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e345      	b.n	8003068 <HAL_RCC_OscConfig+0x106c>
 80029dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029e0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029e4:	2202      	movs	r2, #2
 80029e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	fa93 f2a3 	rbit	r2, r3
 80029f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029fa:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a08:	2202      	movs	r2, #2
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a10:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	fa93 f2a3 	rbit	r2, r3
 8002a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a1e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a22:	601a      	str	r2, [r3, #0]
  return result;
 8002a24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a28:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002a2c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2e:	fab3 f383 	clz	r3, r3
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	095b      	lsrs	r3, r3, #5
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	f043 0302 	orr.w	r3, r3, #2
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d102      	bne.n	8002a48 <HAL_RCC_OscConfig+0xa4c>
 8002a42:	4b84      	ldr	r3, [pc, #528]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	e013      	b.n	8002a70 <HAL_RCC_OscConfig+0xa74>
 8002a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a4c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a50:	2202      	movs	r2, #2
 8002a52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a58:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a66:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	4b79      	ldr	r3, [pc, #484]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a74:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a78:	2102      	movs	r1, #2
 8002a7a:	6011      	str	r1, [r2, #0]
 8002a7c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a80:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	fa92 f1a2 	rbit	r1, r2
 8002a8a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a8e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a92:	6011      	str	r1, [r2, #0]
  return result;
 8002a94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a98:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	fab2 f282 	clz	r2, r2
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	f002 021f 	and.w	r2, r2, #31
 8002aae:	2101      	movs	r1, #1
 8002ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d084      	beq.n	80029c4 <HAL_RCC_OscConfig+0x9c8>
 8002aba:	e07f      	b.n	8002bbc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7fe ffba 	bl	8001a34 <HAL_GetTick>
 8002ac0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac4:	e00b      	b.n	8002ade <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7fe ffb5 	bl	8001a34 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e2c4      	b.n	8003068 <HAL_RCC_OscConfig+0x106c>
 8002ade:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ae2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aee:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	fa93 f2a3 	rbit	r2, r3
 8002af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afc:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b06:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b12:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	fa93 f2a3 	rbit	r2, r3
 8002b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b20:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b24:	601a      	str	r2, [r3, #0]
  return result;
 8002b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b2a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002b2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b30:	fab3 f383 	clz	r3, r3
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	095b      	lsrs	r3, r3, #5
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	f043 0302 	orr.w	r3, r3, #2
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d102      	bne.n	8002b4a <HAL_RCC_OscConfig+0xb4e>
 8002b44:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 8002b46:	6a1b      	ldr	r3, [r3, #32]
 8002b48:	e013      	b.n	8002b72 <HAL_RCC_OscConfig+0xb76>
 8002b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b52:	2202      	movs	r2, #2
 8002b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b5a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	fa93 f2a3 	rbit	r2, r3
 8002b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b68:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	4b39      	ldr	r3, [pc, #228]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b76:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b7a:	2102      	movs	r1, #2
 8002b7c:	6011      	str	r1, [r2, #0]
 8002b7e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b82:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002b86:	6812      	ldr	r2, [r2, #0]
 8002b88:	fa92 f1a2 	rbit	r1, r2
 8002b8c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b90:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b94:	6011      	str	r1, [r2, #0]
  return result;
 8002b96:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002b9a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	fab2 f282 	clz	r2, r2
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002baa:	b2d2      	uxtb	r2, r2
 8002bac:	f002 021f 	and.w	r2, r2, #31
 8002bb0:	2101      	movs	r1, #1
 8002bb2:	fa01 f202 	lsl.w	r2, r1, r2
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d184      	bne.n	8002ac6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bbc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc4:	4b23      	ldr	r3, [pc, #140]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 8002bc6:	69db      	ldr	r3, [r3, #28]
 8002bc8:	4a22      	ldr	r2, [pc, #136]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 8002bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	f000 8242 	beq.w	8003066 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be2:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <HAL_RCC_OscConfig+0xc58>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b08      	cmp	r3, #8
 8002bec:	f000 8213 	beq.w	8003016 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	f040 8162 	bne.w	8002ec6 <HAL_RCC_OscConfig+0xeca>
 8002c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c06:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c14:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	fa93 f2a3 	rbit	r2, r3
 8002c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c22:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c26:	601a      	str	r2, [r3, #0]
  return result;
 8002c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c2c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002c30:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	461a      	mov	r2, r3
 8002c44:	2300      	movs	r3, #0
 8002c46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c48:	f7fe fef4 	bl	8001a34 <HAL_GetTick>
 8002c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c50:	e00c      	b.n	8002c6c <HAL_RCC_OscConfig+0xc70>
 8002c52:	bf00      	nop
 8002c54:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe feec 	bl	8001a34 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e1fd      	b.n	8003068 <HAL_RCC_OscConfig+0x106c>
 8002c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c70:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	fa93 f2a3 	rbit	r2, r3
 8002c88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c90:	601a      	str	r2, [r3, #0]
  return result;
 8002c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c96:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002c9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9c:	fab3 f383 	clz	r3, r3
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	095b      	lsrs	r3, r3, #5
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d102      	bne.n	8002cb6 <HAL_RCC_OscConfig+0xcba>
 8002cb0:	4bb0      	ldr	r3, [pc, #704]	; (8002f74 <HAL_RCC_OscConfig+0xf78>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	e027      	b.n	8002d06 <HAL_RCC_OscConfig+0xd0a>
 8002cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002cbe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	fa93 f2a3 	rbit	r2, r3
 8002cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce0:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002ce4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cee:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	fa93 f2a3 	rbit	r2, r3
 8002cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cfc:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	4b9c      	ldr	r3, [pc, #624]	; (8002f74 <HAL_RCC_OscConfig+0xf78>)
 8002d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d0a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d0e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d12:	6011      	str	r1, [r2, #0]
 8002d14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d18:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002d1c:	6812      	ldr	r2, [r2, #0]
 8002d1e:	fa92 f1a2 	rbit	r1, r2
 8002d22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d26:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d2a:	6011      	str	r1, [r2, #0]
  return result;
 8002d2c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002d30:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	fab2 f282 	clz	r2, r2
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	f042 0220 	orr.w	r2, r2, #32
 8002d40:	b2d2      	uxtb	r2, r2
 8002d42:	f002 021f 	and.w	r2, r2, #31
 8002d46:	2101      	movs	r1, #1
 8002d48:	fa01 f202 	lsl.w	r2, r1, r2
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d182      	bne.n	8002c58 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d52:	4b88      	ldr	r3, [pc, #544]	; (8002f74 <HAL_RCC_OscConfig+0xf78>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	430b      	orrs	r3, r1
 8002d74:	497f      	ldr	r1, [pc, #508]	; (8002f74 <HAL_RCC_OscConfig+0xf78>)
 8002d76:	4313      	orrs	r3, r2
 8002d78:	604b      	str	r3, [r1, #4]
 8002d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d7e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d82:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d8c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	fa93 f2a3 	rbit	r2, r3
 8002d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d9a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002d9e:	601a      	str	r2, [r3, #0]
  return result;
 8002da0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002da4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002da8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002db4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	461a      	mov	r2, r3
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fe38 	bl	8001a34 <HAL_GetTick>
 8002dc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dc8:	e009      	b.n	8002dde <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dca:	f7fe fe33 	bl	8001a34 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e144      	b.n	8003068 <HAL_RCC_OscConfig+0x106c>
 8002dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002de6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002df0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	fa93 f2a3 	rbit	r2, r3
 8002dfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dfe:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e02:	601a      	str	r2, [r3, #0]
  return result;
 8002e04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e08:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002e0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	095b      	lsrs	r3, r3, #5
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d102      	bne.n	8002e28 <HAL_RCC_OscConfig+0xe2c>
 8002e22:	4b54      	ldr	r3, [pc, #336]	; (8002f74 <HAL_RCC_OscConfig+0xf78>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	e027      	b.n	8002e78 <HAL_RCC_OscConfig+0xe7c>
 8002e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e2c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e3a:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	fa93 f2a3 	rbit	r2, r3
 8002e44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e48:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e52:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e56:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e60:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	fa93 f2a3 	rbit	r2, r3
 8002e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	4b3f      	ldr	r3, [pc, #252]	; (8002f74 <HAL_RCC_OscConfig+0xf78>)
 8002e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e7c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e84:	6011      	str	r1, [r2, #0]
 8002e86:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e8a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002e8e:	6812      	ldr	r2, [r2, #0]
 8002e90:	fa92 f1a2 	rbit	r1, r2
 8002e94:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002e98:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002e9c:	6011      	str	r1, [r2, #0]
  return result;
 8002e9e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ea2:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	fab2 f282 	clz	r2, r2
 8002eac:	b2d2      	uxtb	r2, r2
 8002eae:	f042 0220 	orr.w	r2, r2, #32
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	f002 021f 	and.w	r2, r2, #31
 8002eb8:	2101      	movs	r1, #1
 8002eba:	fa01 f202 	lsl.w	r2, r1, r2
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d082      	beq.n	8002dca <HAL_RCC_OscConfig+0xdce>
 8002ec4:	e0cf      	b.n	8003066 <HAL_RCC_OscConfig+0x106a>
 8002ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eca:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002ece:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002ed2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed8:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	fa93 f2a3 	rbit	r2, r3
 8002ee2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee6:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002eea:	601a      	str	r2, [r3, #0]
  return result;
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002ef4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002f00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	461a      	mov	r2, r3
 8002f08:	2300      	movs	r3, #0
 8002f0a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f0c:	f7fe fd92 	bl	8001a34 <HAL_GetTick>
 8002f10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f14:	e009      	b.n	8002f2a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f16:	f7fe fd8d 	bl	8001a34 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e09e      	b.n	8003068 <HAL_RCC_OscConfig+0x106c>
 8002f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f3c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	fa93 f2a3 	rbit	r2, r3
 8002f46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f4a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f4e:	601a      	str	r2, [r3, #0]
  return result;
 8002f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f54:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002f58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f5a:	fab3 f383 	clz	r3, r3
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	f043 0301 	orr.w	r3, r3, #1
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d104      	bne.n	8002f78 <HAL_RCC_OscConfig+0xf7c>
 8002f6e:	4b01      	ldr	r3, [pc, #4]	; (8002f74 <HAL_RCC_OscConfig+0xf78>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	e029      	b.n	8002fc8 <HAL_RCC_OscConfig+0xfcc>
 8002f74:	40021000 	.word	0x40021000
 8002f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f7c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f8a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	fa93 f2a3 	rbit	r2, r3
 8002f94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f98:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002f9c:	601a      	str	r2, [r3, #0]
 8002f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb0:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	fa93 f2a3 	rbit	r2, r3
 8002fba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fbe:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <HAL_RCC_OscConfig+0x1078>)
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fcc:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002fd0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fd4:	6011      	str	r1, [r2, #0]
 8002fd6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fda:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002fde:	6812      	ldr	r2, [r2, #0]
 8002fe0:	fa92 f1a2 	rbit	r1, r2
 8002fe4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002fe8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002fec:	6011      	str	r1, [r2, #0]
  return result;
 8002fee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ff2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	fab2 f282 	clz	r2, r2
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	f042 0220 	orr.w	r2, r2, #32
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	f002 021f 	and.w	r2, r2, #31
 8003008:	2101      	movs	r1, #1
 800300a:	fa01 f202 	lsl.w	r2, r1, r2
 800300e:	4013      	ands	r3, r2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d180      	bne.n	8002f16 <HAL_RCC_OscConfig+0xf1a>
 8003014:	e027      	b.n	8003066 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800301a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e01e      	b.n	8003068 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_RCC_OscConfig+0x1078>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003032:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003036:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800303a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800303e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	429a      	cmp	r2, r3
 8003048:	d10b      	bne.n	8003062 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800304a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800304e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003052:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003056:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800305e:	429a      	cmp	r2, r3
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e000      	b.n	8003068 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40021000 	.word	0x40021000

08003078 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b09e      	sub	sp, #120	; 0x78
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e162      	b.n	8003356 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003090:	4b90      	ldr	r3, [pc, #576]	; (80032d4 <HAL_RCC_ClockConfig+0x25c>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0307 	and.w	r3, r3, #7
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	429a      	cmp	r2, r3
 800309c:	d910      	bls.n	80030c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800309e:	4b8d      	ldr	r3, [pc, #564]	; (80032d4 <HAL_RCC_ClockConfig+0x25c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 0207 	bic.w	r2, r3, #7
 80030a6:	498b      	ldr	r1, [pc, #556]	; (80032d4 <HAL_RCC_ClockConfig+0x25c>)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ae:	4b89      	ldr	r3, [pc, #548]	; (80032d4 <HAL_RCC_ClockConfig+0x25c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d001      	beq.n	80030c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e14a      	b.n	8003356 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030cc:	4b82      	ldr	r3, [pc, #520]	; (80032d8 <HAL_RCC_ClockConfig+0x260>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	497f      	ldr	r1, [pc, #508]	; (80032d8 <HAL_RCC_ClockConfig+0x260>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80dc 	beq.w	80032a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d13c      	bne.n	800316e <HAL_RCC_ClockConfig+0xf6>
 80030f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030f8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80030fc:	fa93 f3a3 	rbit	r3, r3
 8003100:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003104:	fab3 f383 	clz	r3, r3
 8003108:	b2db      	uxtb	r3, r3
 800310a:	095b      	lsrs	r3, r3, #5
 800310c:	b2db      	uxtb	r3, r3
 800310e:	f043 0301 	orr.w	r3, r3, #1
 8003112:	b2db      	uxtb	r3, r3
 8003114:	2b01      	cmp	r3, #1
 8003116:	d102      	bne.n	800311e <HAL_RCC_ClockConfig+0xa6>
 8003118:	4b6f      	ldr	r3, [pc, #444]	; (80032d8 <HAL_RCC_ClockConfig+0x260>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	e00f      	b.n	800313e <HAL_RCC_ClockConfig+0xc6>
 800311e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003122:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003126:	fa93 f3a3 	rbit	r3, r3
 800312a:	667b      	str	r3, [r7, #100]	; 0x64
 800312c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003130:	663b      	str	r3, [r7, #96]	; 0x60
 8003132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	65fb      	str	r3, [r7, #92]	; 0x5c
 800313a:	4b67      	ldr	r3, [pc, #412]	; (80032d8 <HAL_RCC_ClockConfig+0x260>)
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003142:	65ba      	str	r2, [r7, #88]	; 0x58
 8003144:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003146:	fa92 f2a2 	rbit	r2, r2
 800314a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800314c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800314e:	fab2 f282 	clz	r2, r2
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	f042 0220 	orr.w	r2, r2, #32
 8003158:	b2d2      	uxtb	r2, r2
 800315a:	f002 021f 	and.w	r2, r2, #31
 800315e:	2101      	movs	r1, #1
 8003160:	fa01 f202 	lsl.w	r2, r1, r2
 8003164:	4013      	ands	r3, r2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d17b      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0f3      	b.n	8003356 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b02      	cmp	r3, #2
 8003174:	d13c      	bne.n	80031f0 <HAL_RCC_ClockConfig+0x178>
 8003176:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800317a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800317e:	fa93 f3a3 	rbit	r3, r3
 8003182:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003186:	fab3 f383 	clz	r3, r3
 800318a:	b2db      	uxtb	r3, r3
 800318c:	095b      	lsrs	r3, r3, #5
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b01      	cmp	r3, #1
 8003198:	d102      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x128>
 800319a:	4b4f      	ldr	r3, [pc, #316]	; (80032d8 <HAL_RCC_ClockConfig+0x260>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	e00f      	b.n	80031c0 <HAL_RCC_ClockConfig+0x148>
 80031a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031a8:	fa93 f3a3 	rbit	r3, r3
 80031ac:	647b      	str	r3, [r7, #68]	; 0x44
 80031ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b2:	643b      	str	r3, [r7, #64]	; 0x40
 80031b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b6:	fa93 f3a3 	rbit	r3, r3
 80031ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031bc:	4b46      	ldr	r3, [pc, #280]	; (80032d8 <HAL_RCC_ClockConfig+0x260>)
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c4:	63ba      	str	r2, [r7, #56]	; 0x38
 80031c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031c8:	fa92 f2a2 	rbit	r2, r2
 80031cc:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80031ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031d0:	fab2 f282 	clz	r2, r2
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	f042 0220 	orr.w	r2, r2, #32
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	f002 021f 	and.w	r2, r2, #31
 80031e0:	2101      	movs	r1, #1
 80031e2:	fa01 f202 	lsl.w	r2, r1, r2
 80031e6:	4013      	ands	r3, r2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d13a      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e0b2      	b.n	8003356 <HAL_RCC_ClockConfig+0x2de>
 80031f0:	2302      	movs	r3, #2
 80031f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f6:	fa93 f3a3 	rbit	r3, r3
 80031fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fe:	fab3 f383 	clz	r3, r3
 8003202:	b2db      	uxtb	r3, r3
 8003204:	095b      	lsrs	r3, r3, #5
 8003206:	b2db      	uxtb	r3, r3
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d102      	bne.n	8003218 <HAL_RCC_ClockConfig+0x1a0>
 8003212:	4b31      	ldr	r3, [pc, #196]	; (80032d8 <HAL_RCC_ClockConfig+0x260>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	e00d      	b.n	8003234 <HAL_RCC_ClockConfig+0x1bc>
 8003218:	2302      	movs	r3, #2
 800321a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
 8003224:	2302      	movs	r3, #2
 8003226:	623b      	str	r3, [r7, #32]
 8003228:	6a3b      	ldr	r3, [r7, #32]
 800322a:	fa93 f3a3 	rbit	r3, r3
 800322e:	61fb      	str	r3, [r7, #28]
 8003230:	4b29      	ldr	r3, [pc, #164]	; (80032d8 <HAL_RCC_ClockConfig+0x260>)
 8003232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003234:	2202      	movs	r2, #2
 8003236:	61ba      	str	r2, [r7, #24]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	fa92 f2a2 	rbit	r2, r2
 800323e:	617a      	str	r2, [r7, #20]
  return result;
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	fab2 f282 	clz	r2, r2
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	f042 0220 	orr.w	r2, r2, #32
 800324c:	b2d2      	uxtb	r2, r2
 800324e:	f002 021f 	and.w	r2, r2, #31
 8003252:	2101      	movs	r1, #1
 8003254:	fa01 f202 	lsl.w	r2, r1, r2
 8003258:	4013      	ands	r3, r2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e079      	b.n	8003356 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003262:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <HAL_RCC_ClockConfig+0x260>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f023 0203 	bic.w	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	491a      	ldr	r1, [pc, #104]	; (80032d8 <HAL_RCC_ClockConfig+0x260>)
 8003270:	4313      	orrs	r3, r2
 8003272:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003274:	f7fe fbde 	bl	8001a34 <HAL_GetTick>
 8003278:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327a:	e00a      	b.n	8003292 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800327c:	f7fe fbda 	bl	8001a34 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	f241 3288 	movw	r2, #5000	; 0x1388
 800328a:	4293      	cmp	r3, r2
 800328c:	d901      	bls.n	8003292 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e061      	b.n	8003356 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003292:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <HAL_RCC_ClockConfig+0x260>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 020c 	and.w	r2, r3, #12
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d1eb      	bne.n	800327c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032a4:	4b0b      	ldr	r3, [pc, #44]	; (80032d4 <HAL_RCC_ClockConfig+0x25c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d214      	bcs.n	80032dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b08      	ldr	r3, [pc, #32]	; (80032d4 <HAL_RCC_ClockConfig+0x25c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 0207 	bic.w	r2, r3, #7
 80032ba:	4906      	ldr	r1, [pc, #24]	; (80032d4 <HAL_RCC_ClockConfig+0x25c>)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <HAL_RCC_ClockConfig+0x25c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e040      	b.n	8003356 <HAL_RCC_ClockConfig+0x2de>
 80032d4:	40022000 	.word	0x40022000
 80032d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0304 	and.w	r3, r3, #4
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d008      	beq.n	80032fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e8:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <HAL_RCC_ClockConfig+0x2e8>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	491a      	ldr	r1, [pc, #104]	; (8003360 <HAL_RCC_ClockConfig+0x2e8>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d009      	beq.n	800331a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <HAL_RCC_ClockConfig+0x2e8>)
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4912      	ldr	r1, [pc, #72]	; (8003360 <HAL_RCC_ClockConfig+0x2e8>)
 8003316:	4313      	orrs	r3, r2
 8003318:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800331a:	f000 f85d 	bl	80033d8 <HAL_RCC_GetSysClockFreq>
 800331e:	4601      	mov	r1, r0
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_RCC_ClockConfig+0x2e8>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003328:	22f0      	movs	r2, #240	; 0xf0
 800332a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	fa92 f2a2 	rbit	r2, r2
 8003332:	60fa      	str	r2, [r7, #12]
  return result;
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	fab2 f282 	clz	r2, r2
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	40d3      	lsrs	r3, r2
 800333e:	4a09      	ldr	r2, [pc, #36]	; (8003364 <HAL_RCC_ClockConfig+0x2ec>)
 8003340:	5cd3      	ldrb	r3, [r2, r3]
 8003342:	fa21 f303 	lsr.w	r3, r1, r3
 8003346:	4a08      	ldr	r2, [pc, #32]	; (8003368 <HAL_RCC_ClockConfig+0x2f0>)
 8003348:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <HAL_RCC_ClockConfig+0x2f4>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe fb2c 	bl	80019ac <HAL_InitTick>
  
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3778      	adds	r7, #120	; 0x78
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000
 8003364:	08005370 	.word	0x08005370
 8003368:	20000014 	.word	0x20000014
 800336c:	20000018 	.word	0x20000018

08003370 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b08a      	sub	sp, #40	; 0x28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003380:	2303      	movs	r3, #3
 8003382:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 8003388:	f44f 7380 	mov.w	r3, #256	; 0x100
 800338c:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 800338e:	2300      	movs	r3, #0
 8003390:	627b      	str	r3, [r7, #36]	; 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003392:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <HAL_RCC_MCOConfig+0x64>)
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	4a0f      	ldr	r2, [pc, #60]	; (80033d4 <HAL_RCC_MCOConfig+0x64>)
 8003398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800339c:	6153      	str	r3, [r2, #20]
 800339e:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <HAL_RCC_MCOConfig+0x64>)
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80033aa:	f107 0314 	add.w	r3, r7, #20
 80033ae:	4619      	mov	r1, r3
 80033b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b4:	f7fe fc80 	bl	8001cb8 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <HAL_RCC_MCOConfig+0x64>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f023 42ee 	bic.w	r2, r3, #1996488704	; 0x77000000
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	430b      	orrs	r3, r1
 80033c6:	4903      	ldr	r1, [pc, #12]	; (80033d4 <HAL_RCC_MCOConfig+0x64>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
}
 80033cc:	bf00      	nop
 80033ce:	3728      	adds	r7, #40	; 0x28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	40021000 	.word	0x40021000

080033d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	b08b      	sub	sp, #44	; 0x2c
 80033dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	61fb      	str	r3, [r7, #28]
 80033e2:	2300      	movs	r3, #0
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	2300      	movs	r3, #0
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ea:	2300      	movs	r3, #0
 80033ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033f2:	4b29      	ldr	r3, [pc, #164]	; (8003498 <HAL_RCC_GetSysClockFreq+0xc0>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d002      	beq.n	8003408 <HAL_RCC_GetSysClockFreq+0x30>
 8003402:	2b08      	cmp	r3, #8
 8003404:	d003      	beq.n	800340e <HAL_RCC_GetSysClockFreq+0x36>
 8003406:	e03c      	b.n	8003482 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003408:	4b24      	ldr	r3, [pc, #144]	; (800349c <HAL_RCC_GetSysClockFreq+0xc4>)
 800340a:	623b      	str	r3, [r7, #32]
      break;
 800340c:	e03c      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003414:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003418:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	fa92 f2a2 	rbit	r2, r2
 8003420:	607a      	str	r2, [r7, #4]
  return result;
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	fab2 f282 	clz	r2, r2
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	40d3      	lsrs	r3, r2
 800342c:	4a1c      	ldr	r2, [pc, #112]	; (80034a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800342e:	5cd3      	ldrb	r3, [r2, r3]
 8003430:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003432:	4b19      	ldr	r3, [pc, #100]	; (8003498 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	220f      	movs	r2, #15
 800343c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	fa92 f2a2 	rbit	r2, r2
 8003444:	60fa      	str	r2, [r7, #12]
  return result;
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	fab2 f282 	clz	r2, r2
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	40d3      	lsrs	r3, r2
 8003450:	4a14      	ldr	r2, [pc, #80]	; (80034a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003452:	5cd3      	ldrb	r3, [r2, r3]
 8003454:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003460:	4a0e      	ldr	r2, [pc, #56]	; (800349c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	fbb2 f2f3 	udiv	r2, r2, r3
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	627b      	str	r3, [r7, #36]	; 0x24
 8003470:	e004      	b.n	800347c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	4a0c      	ldr	r2, [pc, #48]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	623b      	str	r3, [r7, #32]
      break;
 8003480:	e002      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003482:	4b06      	ldr	r3, [pc, #24]	; (800349c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003484:	623b      	str	r3, [r7, #32]
      break;
 8003486:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003488:	6a3b      	ldr	r3, [r7, #32]
}
 800348a:	4618      	mov	r0, r3
 800348c:	372c      	adds	r7, #44	; 0x2c
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40021000 	.word	0x40021000
 800349c:	007a1200 	.word	0x007a1200
 80034a0:	08005380 	.word	0x08005380
 80034a4:	08005390 	.word	0x08005390
 80034a8:	003d0900 	.word	0x003d0900

080034ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b092      	sub	sp, #72	; 0x48
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80d4 	beq.w	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d0:	4b4e      	ldr	r3, [pc, #312]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10e      	bne.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034dc:	4b4b      	ldr	r3, [pc, #300]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	4a4a      	ldr	r2, [pc, #296]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e6:	61d3      	str	r3, [r2, #28]
 80034e8:	4b48      	ldr	r3, [pc, #288]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fa:	4b45      	ldr	r3, [pc, #276]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d118      	bne.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003506:	4b42      	ldr	r3, [pc, #264]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a41      	ldr	r2, [pc, #260]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800350c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003510:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003512:	f7fe fa8f 	bl	8001a34 <HAL_GetTick>
 8003516:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003518:	e008      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351a:	f7fe fa8b 	bl	8001a34 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b64      	cmp	r3, #100	; 0x64
 8003526:	d901      	bls.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e13c      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352c:	4b38      	ldr	r3, [pc, #224]	; (8003610 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003538:	4b34      	ldr	r3, [pc, #208]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003540:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 8084 	beq.w	8003652 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003554:	429a      	cmp	r2, r3
 8003556:	d07c      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003558:	4b2c      	ldr	r3, [pc, #176]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003560:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003566:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	461a      	mov	r2, r3
 800357a:	4b26      	ldr	r3, [pc, #152]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800357c:	4413      	add	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	461a      	mov	r2, r3
 8003582:	2301      	movs	r3, #1
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800358a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003596:	fab3 f383 	clz	r3, r3
 800359a:	b2db      	uxtb	r3, r3
 800359c:	461a      	mov	r2, r3
 800359e:	4b1d      	ldr	r3, [pc, #116]	; (8003614 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	461a      	mov	r2, r3
 80035a6:	2300      	movs	r3, #0
 80035a8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80035aa:	4a18      	ldr	r2, [pc, #96]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ae:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80035b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d04b      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ba:	f7fe fa3b 	bl	8001a34 <HAL_GetTick>
 80035be:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c0:	e00a      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035c2:	f7fe fa37 	bl	8001a34 <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e0e6      	b.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
 80035d8:	2302      	movs	r3, #2
 80035da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035de:	fa93 f3a3 	rbit	r3, r3
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
 80035e4:	2302      	movs	r3, #2
 80035e6:	623b      	str	r3, [r7, #32]
 80035e8:	6a3b      	ldr	r3, [r7, #32]
 80035ea:	fa93 f3a3 	rbit	r3, r3
 80035ee:	61fb      	str	r3, [r7, #28]
  return result;
 80035f0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	fab3 f383 	clz	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	095b      	lsrs	r3, r3, #5
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f043 0302 	orr.w	r3, r3, #2
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d108      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003606:	4b01      	ldr	r3, [pc, #4]	; (800360c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	e00d      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800360c:	40021000 	.word	0x40021000
 8003610:	40007000 	.word	0x40007000
 8003614:	10908100 	.word	0x10908100
 8003618:	2302      	movs	r3, #2
 800361a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	617b      	str	r3, [r7, #20]
 8003624:	4b62      	ldr	r3, [pc, #392]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	2202      	movs	r2, #2
 800362a:	613a      	str	r2, [r7, #16]
 800362c:	693a      	ldr	r2, [r7, #16]
 800362e:	fa92 f2a2 	rbit	r2, r2
 8003632:	60fa      	str	r2, [r7, #12]
  return result;
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	fab2 f282 	clz	r2, r2
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	f002 021f 	and.w	r2, r2, #31
 8003646:	2101      	movs	r1, #1
 8003648:	fa01 f202 	lsl.w	r2, r1, r2
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0b7      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003652:	4b57      	ldr	r3, [pc, #348]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4954      	ldr	r1, [pc, #336]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003660:	4313      	orrs	r3, r2
 8003662:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003664:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003668:	2b01      	cmp	r3, #1
 800366a:	d105      	bne.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800366c:	4b50      	ldr	r3, [pc, #320]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	4a4f      	ldr	r2, [pc, #316]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003672:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003676:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003684:	4b4a      	ldr	r3, [pc, #296]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	f023 0203 	bic.w	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4947      	ldr	r1, [pc, #284]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003692:	4313      	orrs	r3, r2
 8003694:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036a2:	4b43      	ldr	r3, [pc, #268]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	f023 0210 	bic.w	r2, r3, #16
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	4940      	ldr	r1, [pc, #256]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	630b      	str	r3, [r1, #48]	; 0x30
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036c0:	4b3b      	ldr	r3, [pc, #236]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c4:	f023 0220 	bic.w	r2, r3, #32
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	4938      	ldr	r1, [pc, #224]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d008      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036de:	4b34      	ldr	r3, [pc, #208]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	4931      	ldr	r1, [pc, #196]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036ec:	4313      	orrs	r3, r2
 80036ee:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d008      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80036fc:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	4929      	ldr	r1, [pc, #164]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800370a:	4313      	orrs	r3, r2
 800370c:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003716:	2b00      	cmp	r3, #0
 8003718:	d008      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 800371a:	4b25      	ldr	r3, [pc, #148]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	4922      	ldr	r1, [pc, #136]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003728:	4313      	orrs	r3, r2
 800372a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003738:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	491a      	ldr	r1, [pc, #104]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003746:	4313      	orrs	r3, r2
 8003748:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d008      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003756:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	4913      	ldr	r1, [pc, #76]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003764:	4313      	orrs	r3, r2
 8003766:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003774:	4b0e      	ldr	r3, [pc, #56]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003780:	490b      	ldr	r1, [pc, #44]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003782:	4313      	orrs	r3, r2
 8003784:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800379e:	4904      	ldr	r1, [pc, #16]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3748      	adds	r7, #72	; 0x48
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	40021000 	.word	0x40021000

080037b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e049      	b.n	800385a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fd ff74 	bl	80016c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f000 ffa8 	bl	8004748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d001      	beq.n	800387c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e03b      	b.n	80038f4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a19      	ldr	r2, [pc, #100]	; (8003900 <HAL_TIM_Base_Start_IT+0x9c>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d009      	beq.n	80038b2 <HAL_TIM_Base_Start_IT+0x4e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a6:	d004      	beq.n	80038b2 <HAL_TIM_Base_Start_IT+0x4e>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a15      	ldr	r2, [pc, #84]	; (8003904 <HAL_TIM_Base_Start_IT+0xa0>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d115      	bne.n	80038de <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	4b13      	ldr	r3, [pc, #76]	; (8003908 <HAL_TIM_Base_Start_IT+0xa4>)
 80038ba:	4013      	ands	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2b06      	cmp	r3, #6
 80038c2:	d015      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x8c>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038ca:	d011      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038dc:	e008      	b.n	80038f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	e000      	b.n	80038f2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	40012c00 	.word	0x40012c00
 8003904:	40014000 	.word	0x40014000
 8003908:	00010007 	.word	0x00010007

0800390c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e049      	b.n	80039b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d106      	bne.n	8003938 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f841 	bl	80039ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2202      	movs	r2, #2
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	4619      	mov	r1, r3
 800394a:	4610      	mov	r0, r2
 800394c:	f000 fefc 	bl	8004748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d109      	bne.n	80039f4 <HAL_TIM_PWM_Start+0x24>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	bf14      	ite	ne
 80039ec:	2301      	movne	r3, #1
 80039ee:	2300      	moveq	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	e03c      	b.n	8003a6e <HAL_TIM_PWM_Start+0x9e>
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	d109      	bne.n	8003a0e <HAL_TIM_PWM_Start+0x3e>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	bf14      	ite	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	2300      	moveq	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	e02f      	b.n	8003a6e <HAL_TIM_PWM_Start+0x9e>
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d109      	bne.n	8003a28 <HAL_TIM_PWM_Start+0x58>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	bf14      	ite	ne
 8003a20:	2301      	movne	r3, #1
 8003a22:	2300      	moveq	r3, #0
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	e022      	b.n	8003a6e <HAL_TIM_PWM_Start+0x9e>
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	2b0c      	cmp	r3, #12
 8003a2c:	d109      	bne.n	8003a42 <HAL_TIM_PWM_Start+0x72>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	bf14      	ite	ne
 8003a3a:	2301      	movne	r3, #1
 8003a3c:	2300      	moveq	r3, #0
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	e015      	b.n	8003a6e <HAL_TIM_PWM_Start+0x9e>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d109      	bne.n	8003a5c <HAL_TIM_PWM_Start+0x8c>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	bf14      	ite	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	2300      	moveq	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e008      	b.n	8003a6e <HAL_TIM_PWM_Start+0x9e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	bf14      	ite	ne
 8003a68:	2301      	movne	r3, #1
 8003a6a:	2300      	moveq	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e083      	b.n	8003b7e <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d104      	bne.n	8003a86 <HAL_TIM_PWM_Start+0xb6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a84:	e023      	b.n	8003ace <HAL_TIM_PWM_Start+0xfe>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d104      	bne.n	8003a96 <HAL_TIM_PWM_Start+0xc6>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a94:	e01b      	b.n	8003ace <HAL_TIM_PWM_Start+0xfe>
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d104      	bne.n	8003aa6 <HAL_TIM_PWM_Start+0xd6>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aa4:	e013      	b.n	8003ace <HAL_TIM_PWM_Start+0xfe>
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b0c      	cmp	r3, #12
 8003aaa:	d104      	bne.n	8003ab6 <HAL_TIM_PWM_Start+0xe6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2202      	movs	r2, #2
 8003ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ab4:	e00b      	b.n	8003ace <HAL_TIM_PWM_Start+0xfe>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	2b10      	cmp	r3, #16
 8003aba:	d104      	bne.n	8003ac6 <HAL_TIM_PWM_Start+0xf6>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ac4:	e003      	b.n	8003ace <HAL_TIM_PWM_Start+0xfe>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2202      	movs	r2, #2
 8003aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	6839      	ldr	r1, [r7, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 faf0 	bl	80050bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a29      	ldr	r2, [pc, #164]	; (8003b88 <HAL_TIM_PWM_Start+0x1b8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00e      	beq.n	8003b04 <HAL_TIM_PWM_Start+0x134>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a28      	ldr	r2, [pc, #160]	; (8003b8c <HAL_TIM_PWM_Start+0x1bc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d009      	beq.n	8003b04 <HAL_TIM_PWM_Start+0x134>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a26      	ldr	r2, [pc, #152]	; (8003b90 <HAL_TIM_PWM_Start+0x1c0>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d004      	beq.n	8003b04 <HAL_TIM_PWM_Start+0x134>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a25      	ldr	r2, [pc, #148]	; (8003b94 <HAL_TIM_PWM_Start+0x1c4>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_TIM_PWM_Start+0x138>
 8003b04:	2301      	movs	r3, #1
 8003b06:	e000      	b.n	8003b0a <HAL_TIM_PWM_Start+0x13a>
 8003b08:	2300      	movs	r3, #0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a19      	ldr	r2, [pc, #100]	; (8003b88 <HAL_TIM_PWM_Start+0x1b8>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d009      	beq.n	8003b3c <HAL_TIM_PWM_Start+0x16c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b30:	d004      	beq.n	8003b3c <HAL_TIM_PWM_Start+0x16c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <HAL_TIM_PWM_Start+0x1bc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d115      	bne.n	8003b68 <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <HAL_TIM_PWM_Start+0x1c8>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b06      	cmp	r3, #6
 8003b4c:	d015      	beq.n	8003b7a <HAL_TIM_PWM_Start+0x1aa>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b54:	d011      	beq.n	8003b7a <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f042 0201 	orr.w	r2, r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b66:	e008      	b.n	8003b7a <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f042 0201 	orr.w	r2, r2, #1
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	e000      	b.n	8003b7c <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40012c00 	.word	0x40012c00
 8003b8c:	40014000 	.word	0x40014000
 8003b90:	40014400 	.word	0x40014400
 8003b94:	40014800 	.word	0x40014800
 8003b98:	00010007 	.word	0x00010007

08003b9c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	2200      	movs	r2, #0
 8003bac:	6839      	ldr	r1, [r7, #0]
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 fa84 	bl	80050bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a3b      	ldr	r2, [pc, #236]	; (8003ca8 <HAL_TIM_PWM_Stop+0x10c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00e      	beq.n	8003bdc <HAL_TIM_PWM_Stop+0x40>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a3a      	ldr	r2, [pc, #232]	; (8003cac <HAL_TIM_PWM_Stop+0x110>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d009      	beq.n	8003bdc <HAL_TIM_PWM_Stop+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a38      	ldr	r2, [pc, #224]	; (8003cb0 <HAL_TIM_PWM_Stop+0x114>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d004      	beq.n	8003bdc <HAL_TIM_PWM_Stop+0x40>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a37      	ldr	r2, [pc, #220]	; (8003cb4 <HAL_TIM_PWM_Stop+0x118>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d101      	bne.n	8003be0 <HAL_TIM_PWM_Stop+0x44>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <HAL_TIM_PWM_Stop+0x46>
 8003be0:	2300      	movs	r3, #0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d017      	beq.n	8003c16 <HAL_TIM_PWM_Stop+0x7a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a1a      	ldr	r2, [r3, #32]
 8003bec:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10f      	bne.n	8003c16 <HAL_TIM_PWM_Stop+0x7a>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	6a1a      	ldr	r2, [r3, #32]
 8003bfc:	f240 4344 	movw	r3, #1092	; 0x444
 8003c00:	4013      	ands	r3, r2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d107      	bne.n	8003c16 <HAL_TIM_PWM_Stop+0x7a>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6a1a      	ldr	r2, [r3, #32]
 8003c1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c20:	4013      	ands	r3, r2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10f      	bne.n	8003c46 <HAL_TIM_PWM_Stop+0xaa>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a1a      	ldr	r2, [r3, #32]
 8003c2c:	f240 4344 	movw	r3, #1092	; 0x444
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d107      	bne.n	8003c46 <HAL_TIM_PWM_Stop+0xaa>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0201 	bic.w	r2, r2, #1
 8003c44:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d104      	bne.n	8003c56 <HAL_TIM_PWM_Stop+0xba>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c54:	e023      	b.n	8003c9e <HAL_TIM_PWM_Stop+0x102>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	2b04      	cmp	r3, #4
 8003c5a:	d104      	bne.n	8003c66 <HAL_TIM_PWM_Stop+0xca>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c64:	e01b      	b.n	8003c9e <HAL_TIM_PWM_Stop+0x102>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	2b08      	cmp	r3, #8
 8003c6a:	d104      	bne.n	8003c76 <HAL_TIM_PWM_Stop+0xda>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c74:	e013      	b.n	8003c9e <HAL_TIM_PWM_Stop+0x102>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b0c      	cmp	r3, #12
 8003c7a:	d104      	bne.n	8003c86 <HAL_TIM_PWM_Stop+0xea>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c84:	e00b      	b.n	8003c9e <HAL_TIM_PWM_Stop+0x102>
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b10      	cmp	r3, #16
 8003c8a:	d104      	bne.n	8003c96 <HAL_TIM_PWM_Stop+0xfa>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c94:	e003      	b.n	8003c9e <HAL_TIM_PWM_Stop+0x102>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40012c00 	.word	0x40012c00
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40014400 	.word	0x40014400
 8003cb4:	40014800 	.word	0x40014800

08003cb8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e049      	b.n	8003d5e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f841 	bl	8003d66 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	f000 fd26 	bl	8004748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d104      	bne.n	8003d9a <HAL_TIM_IC_Start_IT+0x1e>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	e023      	b.n	8003de2 <HAL_TIM_IC_Start_IT+0x66>
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b04      	cmp	r3, #4
 8003d9e:	d104      	bne.n	8003daa <HAL_TIM_IC_Start_IT+0x2e>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	e01b      	b.n	8003de2 <HAL_TIM_IC_Start_IT+0x66>
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d104      	bne.n	8003dba <HAL_TIM_IC_Start_IT+0x3e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	e013      	b.n	8003de2 <HAL_TIM_IC_Start_IT+0x66>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	2b0c      	cmp	r3, #12
 8003dbe:	d104      	bne.n	8003dca <HAL_TIM_IC_Start_IT+0x4e>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	e00b      	b.n	8003de2 <HAL_TIM_IC_Start_IT+0x66>
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b10      	cmp	r3, #16
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_IC_Start_IT+0x5e>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	e003      	b.n	8003de2 <HAL_TIM_IC_Start_IT+0x66>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d104      	bne.n	8003df4 <HAL_TIM_IC_Start_IT+0x78>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e013      	b.n	8003e1c <HAL_TIM_IC_Start_IT+0xa0>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d104      	bne.n	8003e04 <HAL_TIM_IC_Start_IT+0x88>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e00b      	b.n	8003e1c <HAL_TIM_IC_Start_IT+0xa0>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d104      	bne.n	8003e14 <HAL_TIM_IC_Start_IT+0x98>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	e003      	b.n	8003e1c <HAL_TIM_IC_Start_IT+0xa0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e1e:	7bbb      	ldrb	r3, [r7, #14]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d102      	bne.n	8003e2a <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e24:	7b7b      	ldrb	r3, [r7, #13]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d001      	beq.n	8003e2e <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e0c9      	b.n	8003fc2 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_IC_Start_IT+0xc2>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e3c:	e023      	b.n	8003e86 <HAL_TIM_IC_Start_IT+0x10a>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b04      	cmp	r3, #4
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_IC_Start_IT+0xd2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e4c:	e01b      	b.n	8003e86 <HAL_TIM_IC_Start_IT+0x10a>
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_IC_Start_IT+0xe2>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e5c:	e013      	b.n	8003e86 <HAL_TIM_IC_Start_IT+0x10a>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b0c      	cmp	r3, #12
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_IC_Start_IT+0xf2>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e6c:	e00b      	b.n	8003e86 <HAL_TIM_IC_Start_IT+0x10a>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b10      	cmp	r3, #16
 8003e72:	d104      	bne.n	8003e7e <HAL_TIM_IC_Start_IT+0x102>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e7c:	e003      	b.n	8003e86 <HAL_TIM_IC_Start_IT+0x10a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d104      	bne.n	8003e96 <HAL_TIM_IC_Start_IT+0x11a>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e94:	e013      	b.n	8003ebe <HAL_TIM_IC_Start_IT+0x142>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d104      	bne.n	8003ea6 <HAL_TIM_IC_Start_IT+0x12a>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ea4:	e00b      	b.n	8003ebe <HAL_TIM_IC_Start_IT+0x142>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d104      	bne.n	8003eb6 <HAL_TIM_IC_Start_IT+0x13a>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eb4:	e003      	b.n	8003ebe <HAL_TIM_IC_Start_IT+0x142>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b0c      	cmp	r3, #12
 8003ec2:	d841      	bhi.n	8003f48 <HAL_TIM_IC_Start_IT+0x1cc>
 8003ec4:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <HAL_TIM_IC_Start_IT+0x150>)
 8003ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eca:	bf00      	nop
 8003ecc:	08003f01 	.word	0x08003f01
 8003ed0:	08003f49 	.word	0x08003f49
 8003ed4:	08003f49 	.word	0x08003f49
 8003ed8:	08003f49 	.word	0x08003f49
 8003edc:	08003f13 	.word	0x08003f13
 8003ee0:	08003f49 	.word	0x08003f49
 8003ee4:	08003f49 	.word	0x08003f49
 8003ee8:	08003f49 	.word	0x08003f49
 8003eec:	08003f25 	.word	0x08003f25
 8003ef0:	08003f49 	.word	0x08003f49
 8003ef4:	08003f49 	.word	0x08003f49
 8003ef8:	08003f49 	.word	0x08003f49
 8003efc:	08003f37 	.word	0x08003f37
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0202 	orr.w	r2, r2, #2
 8003f0e:	60da      	str	r2, [r3, #12]
      break;
 8003f10:	e01d      	b.n	8003f4e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0204 	orr.w	r2, r2, #4
 8003f20:	60da      	str	r2, [r3, #12]
      break;
 8003f22:	e014      	b.n	8003f4e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0208 	orr.w	r2, r2, #8
 8003f32:	60da      	str	r2, [r3, #12]
      break;
 8003f34:	e00b      	b.n	8003f4e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 0210 	orr.w	r2, r2, #16
 8003f44:	60da      	str	r2, [r3, #12]
      break;
 8003f46:	e002      	b.n	8003f4e <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f4c:	bf00      	nop
  }

  if (status == HAL_OK)
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d135      	bne.n	8003fc0 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	6839      	ldr	r1, [r7, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f001 f8ad 	bl	80050bc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a19      	ldr	r2, [pc, #100]	; (8003fcc <HAL_TIM_IC_Start_IT+0x250>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d009      	beq.n	8003f80 <HAL_TIM_IC_Start_IT+0x204>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f74:	d004      	beq.n	8003f80 <HAL_TIM_IC_Start_IT+0x204>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a15      	ldr	r2, [pc, #84]	; (8003fd0 <HAL_TIM_IC_Start_IT+0x254>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d115      	bne.n	8003fac <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <HAL_TIM_IC_Start_IT+0x258>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	2b06      	cmp	r3, #6
 8003f90:	d015      	beq.n	8003fbe <HAL_TIM_IC_Start_IT+0x242>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f98:	d011      	beq.n	8003fbe <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f042 0201 	orr.w	r2, r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003faa:	e008      	b.n	8003fbe <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	e000      	b.n	8003fc0 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fbe:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	40012c00 	.word	0x40012c00
 8003fd0:	40014000 	.word	0x40014000
 8003fd4:	00010007 	.word	0x00010007

08003fd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d122      	bne.n	8004034 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d11b      	bne.n	8004034 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0202 	mvn.w	r2, #2
 8004004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fd fa66 	bl	80014ec <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 fb71 	bl	800470a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fb78 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	f003 0304 	and.w	r3, r3, #4
 800403e:	2b04      	cmp	r3, #4
 8004040:	d122      	bne.n	8004088 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b04      	cmp	r3, #4
 800404e:	d11b      	bne.n	8004088 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f06f 0204 	mvn.w	r2, #4
 8004058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2202      	movs	r2, #2
 800405e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fd fa3c 	bl	80014ec <HAL_TIM_IC_CaptureCallback>
 8004074:	e005      	b.n	8004082 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fb47 	bl	800470a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f000 fb4e 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b08      	cmp	r3, #8
 8004094:	d122      	bne.n	80040dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b08      	cmp	r3, #8
 80040a2:	d11b      	bne.n	80040dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0208 	mvn.w	r2, #8
 80040ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2204      	movs	r2, #4
 80040b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fd fa12 	bl	80014ec <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fb1d 	bl	800470a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 fb24 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0310 	and.w	r3, r3, #16
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d122      	bne.n	8004130 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0310 	and.w	r3, r3, #16
 80040f4:	2b10      	cmp	r3, #16
 80040f6:	d11b      	bne.n	8004130 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0210 	mvn.w	r2, #16
 8004100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2208      	movs	r2, #8
 8004106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fd f9e8 	bl	80014ec <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 faf3 	bl	800470a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 fafa 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	2b01      	cmp	r3, #1
 800413c:	d10e      	bne.n	800415c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b01      	cmp	r3, #1
 800414a:	d107      	bne.n	800415c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0201 	mvn.w	r2, #1
 8004154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7fd fa42 	bl	80015e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004166:	2b80      	cmp	r3, #128	; 0x80
 8004168:	d10e      	bne.n	8004188 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004174:	2b80      	cmp	r3, #128	; 0x80
 8004176:	d107      	bne.n	8004188 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f001 f8a8 	bl	80052d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004196:	d10e      	bne.n	80041b6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a2:	2b80      	cmp	r3, #128	; 0x80
 80041a4:	d107      	bne.n	80041b6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80041ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f001 f89b 	bl	80052ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b40      	cmp	r3, #64	; 0x40
 80041c2:	d10e      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	d107      	bne.n	80041e2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 faa8 	bl	8004732 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d10e      	bne.n	800420e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0320 	and.w	r3, r3, #32
 80041fa:	2b20      	cmp	r3, #32
 80041fc:	d107      	bne.n	800420e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f06f 0220 	mvn.w	r2, #32
 8004206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f001 f85b 	bl	80052c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800420e:	bf00      	nop
 8004210:	3708      	adds	r7, #8
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004230:	2302      	movs	r3, #2
 8004232:	e088      	b.n	8004346 <HAL_TIM_IC_ConfigChannel+0x130>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d11b      	bne.n	800427a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	6819      	ldr	r1, [r3, #0]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	685a      	ldr	r2, [r3, #4]
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f000 fd8d 	bl	8004d70 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699a      	ldr	r2, [r3, #24]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 020c 	bic.w	r2, r2, #12
 8004264:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	6999      	ldr	r1, [r3, #24]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	619a      	str	r2, [r3, #24]
 8004278:	e060      	b.n	800433c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2b04      	cmp	r3, #4
 800427e:	d11c      	bne.n	80042ba <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6819      	ldr	r1, [r3, #0]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f000 fdf3 	bl	8004e7a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	699a      	ldr	r2, [r3, #24]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80042a2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6999      	ldr	r1, [r3, #24]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	021a      	lsls	r2, r3, #8
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	619a      	str	r2, [r3, #24]
 80042b8:	e040      	b.n	800433c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d11b      	bne.n	80042f8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	6819      	ldr	r1, [r3, #0]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	685a      	ldr	r2, [r3, #4]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	f000 fe40 	bl	8004f54 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69da      	ldr	r2, [r3, #28]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f022 020c 	bic.w	r2, r2, #12
 80042e2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69d9      	ldr	r1, [r3, #28]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	61da      	str	r2, [r3, #28]
 80042f6:	e021      	b.n	800433c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b0c      	cmp	r3, #12
 80042fc:	d11c      	bne.n	8004338 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	6819      	ldr	r1, [r3, #0]
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f000 fe5d 	bl	8004fcc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	69da      	ldr	r2, [r3, #28]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004320:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	69d9      	ldr	r1, [r3, #28]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	021a      	lsls	r2, r3, #8
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	61da      	str	r2, [r3, #28]
 8004336:	e001      	b.n	800433c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004344:	7dfb      	ldrb	r3, [r7, #23]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b086      	sub	sp, #24
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800435c:	2300      	movs	r3, #0
 800435e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800436a:	2302      	movs	r3, #2
 800436c:	e0ff      	b.n	800456e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b14      	cmp	r3, #20
 800437a:	f200 80f0 	bhi.w	800455e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800437e:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004384:	080043d9 	.word	0x080043d9
 8004388:	0800455f 	.word	0x0800455f
 800438c:	0800455f 	.word	0x0800455f
 8004390:	0800455f 	.word	0x0800455f
 8004394:	08004419 	.word	0x08004419
 8004398:	0800455f 	.word	0x0800455f
 800439c:	0800455f 	.word	0x0800455f
 80043a0:	0800455f 	.word	0x0800455f
 80043a4:	0800445b 	.word	0x0800445b
 80043a8:	0800455f 	.word	0x0800455f
 80043ac:	0800455f 	.word	0x0800455f
 80043b0:	0800455f 	.word	0x0800455f
 80043b4:	0800449b 	.word	0x0800449b
 80043b8:	0800455f 	.word	0x0800455f
 80043bc:	0800455f 	.word	0x0800455f
 80043c0:	0800455f 	.word	0x0800455f
 80043c4:	080044dd 	.word	0x080044dd
 80043c8:	0800455f 	.word	0x0800455f
 80043cc:	0800455f 	.word	0x0800455f
 80043d0:	0800455f 	.word	0x0800455f
 80043d4:	0800451d 	.word	0x0800451d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	4618      	mov	r0, r3
 80043e0:	f000 fa20 	bl	8004824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0208 	orr.w	r2, r2, #8
 80043f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	699a      	ldr	r2, [r3, #24]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f022 0204 	bic.w	r2, r2, #4
 8004402:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6999      	ldr	r1, [r3, #24]
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	430a      	orrs	r2, r1
 8004414:	619a      	str	r2, [r3, #24]
      break;
 8004416:	e0a5      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	68b9      	ldr	r1, [r7, #8]
 800441e:	4618      	mov	r0, r3
 8004420:	f000 fa86 	bl	8004930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	699a      	ldr	r2, [r3, #24]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	6999      	ldr	r1, [r3, #24]
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	021a      	lsls	r2, r3, #8
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	619a      	str	r2, [r3, #24]
      break;
 8004458:	e084      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68b9      	ldr	r1, [r7, #8]
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fae5 	bl	8004a30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69da      	ldr	r2, [r3, #28]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0208 	orr.w	r2, r2, #8
 8004474:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69da      	ldr	r2, [r3, #28]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0204 	bic.w	r2, r2, #4
 8004484:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69d9      	ldr	r1, [r3, #28]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	430a      	orrs	r2, r1
 8004496:	61da      	str	r2, [r3, #28]
      break;
 8004498:	e064      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f000 fb43 	bl	8004b2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69da      	ldr	r2, [r3, #28]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69da      	ldr	r2, [r3, #28]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69d9      	ldr	r1, [r3, #28]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	021a      	lsls	r2, r3, #8
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	61da      	str	r2, [r3, #28]
      break;
 80044da:	e043      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fb86 	bl	8004bf4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0208 	orr.w	r2, r2, #8
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800451a:	e023      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fbc4 	bl	8004cb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004536:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	021a      	lsls	r2, r3, #8
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800455c:	e002      	b.n	8004564 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	75fb      	strb	r3, [r7, #23]
      break;
 8004562:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800456c:	7dfb      	ldrb	r3, [r7, #23]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3718      	adds	r7, #24
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop

08004578 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004582:	2300      	movs	r3, #0
 8004584:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_TIM_ConfigClockSource+0x1c>
 8004590:	2302      	movs	r3, #2
 8004592:	e0b6      	b.n	8004702 <HAL_TIM_ConfigClockSource+0x18a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2202      	movs	r2, #2
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d0:	d03e      	beq.n	8004650 <HAL_TIM_ConfigClockSource+0xd8>
 80045d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d6:	f200 8087 	bhi.w	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 80045da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045de:	f000 8086 	beq.w	80046ee <HAL_TIM_ConfigClockSource+0x176>
 80045e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e6:	d87f      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 80045e8:	2b70      	cmp	r3, #112	; 0x70
 80045ea:	d01a      	beq.n	8004622 <HAL_TIM_ConfigClockSource+0xaa>
 80045ec:	2b70      	cmp	r3, #112	; 0x70
 80045ee:	d87b      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 80045f0:	2b60      	cmp	r3, #96	; 0x60
 80045f2:	d050      	beq.n	8004696 <HAL_TIM_ConfigClockSource+0x11e>
 80045f4:	2b60      	cmp	r3, #96	; 0x60
 80045f6:	d877      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 80045f8:	2b50      	cmp	r3, #80	; 0x50
 80045fa:	d03c      	beq.n	8004676 <HAL_TIM_ConfigClockSource+0xfe>
 80045fc:	2b50      	cmp	r3, #80	; 0x50
 80045fe:	d873      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 8004600:	2b40      	cmp	r3, #64	; 0x40
 8004602:	d058      	beq.n	80046b6 <HAL_TIM_ConfigClockSource+0x13e>
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d86f      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 8004608:	2b30      	cmp	r3, #48	; 0x30
 800460a:	d064      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x15e>
 800460c:	2b30      	cmp	r3, #48	; 0x30
 800460e:	d86b      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 8004610:	2b20      	cmp	r3, #32
 8004612:	d060      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x15e>
 8004614:	2b20      	cmp	r3, #32
 8004616:	d867      	bhi.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
 8004618:	2b00      	cmp	r3, #0
 800461a:	d05c      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x15e>
 800461c:	2b10      	cmp	r3, #16
 800461e:	d05a      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x15e>
 8004620:	e062      	b.n	80046e8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6818      	ldr	r0, [r3, #0]
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	6899      	ldr	r1, [r3, #8]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f000 fd23 	bl	800507c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004644:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	609a      	str	r2, [r3, #8]
      break;
 800464e:	e04f      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	6899      	ldr	r1, [r3, #8]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f000 fd0c 	bl	800507c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	689a      	ldr	r2, [r3, #8]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004672:	609a      	str	r2, [r3, #8]
      break;
 8004674:	e03c      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	6859      	ldr	r1, [r3, #4]
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	461a      	mov	r2, r3
 8004684:	f000 fbca 	bl	8004e1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2150      	movs	r1, #80	; 0x50
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fcd9 	bl	8005046 <TIM_ITRx_SetConfig>
      break;
 8004694:	e02c      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6859      	ldr	r1, [r3, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	461a      	mov	r2, r3
 80046a4:	f000 fc26 	bl	8004ef4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2160      	movs	r1, #96	; 0x60
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fcc9 	bl	8005046 <TIM_ITRx_SetConfig>
      break;
 80046b4:	e01c      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	6859      	ldr	r1, [r3, #4]
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	461a      	mov	r2, r3
 80046c4:	f000 fbaa 	bl	8004e1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2140      	movs	r1, #64	; 0x40
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fcb9 	bl	8005046 <TIM_ITRx_SetConfig>
      break;
 80046d4:	e00c      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f000 fcb0 	bl	8005046 <TIM_ITRx_SetConfig>
      break;
 80046e6:	e003      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	73fb      	strb	r3, [r7, #15]
      break;
 80046ec:	e000      	b.n	80046f0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80046ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a2e      	ldr	r2, [pc, #184]	; (8004814 <TIM_Base_SetConfig+0xcc>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d003      	beq.n	8004768 <TIM_Base_SetConfig+0x20>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004766:	d108      	bne.n	800477a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800476e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a25      	ldr	r2, [pc, #148]	; (8004814 <TIM_Base_SetConfig+0xcc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d00f      	beq.n	80047a2 <TIM_Base_SetConfig+0x5a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004788:	d00b      	beq.n	80047a2 <TIM_Base_SetConfig+0x5a>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a22      	ldr	r2, [pc, #136]	; (8004818 <TIM_Base_SetConfig+0xd0>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d007      	beq.n	80047a2 <TIM_Base_SetConfig+0x5a>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a21      	ldr	r2, [pc, #132]	; (800481c <TIM_Base_SetConfig+0xd4>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d003      	beq.n	80047a2 <TIM_Base_SetConfig+0x5a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a20      	ldr	r2, [pc, #128]	; (8004820 <TIM_Base_SetConfig+0xd8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d108      	bne.n	80047b4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	4313      	orrs	r3, r2
 80047c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	689a      	ldr	r2, [r3, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a0e      	ldr	r2, [pc, #56]	; (8004814 <TIM_Base_SetConfig+0xcc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00b      	beq.n	80047f8 <TIM_Base_SetConfig+0xb0>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a0d      	ldr	r2, [pc, #52]	; (8004818 <TIM_Base_SetConfig+0xd0>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d007      	beq.n	80047f8 <TIM_Base_SetConfig+0xb0>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a0c      	ldr	r2, [pc, #48]	; (800481c <TIM_Base_SetConfig+0xd4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_Base_SetConfig+0xb0>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a0b      	ldr	r2, [pc, #44]	; (8004820 <TIM_Base_SetConfig+0xd8>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d103      	bne.n	8004800 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	615a      	str	r2, [r3, #20]
}
 8004806:	bf00      	nop
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40012c00 	.word	0x40012c00
 8004818:	40014000 	.word	0x40014000
 800481c:	40014400 	.word	0x40014400
 8004820:	40014800 	.word	0x40014800

08004824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004824:	b480      	push	{r7}
 8004826:	b087      	sub	sp, #28
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f023 0201 	bic.w	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a1b      	ldr	r3, [r3, #32]
 800483e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 0303 	bic.w	r3, r3, #3
 800485e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4313      	orrs	r3, r2
 8004868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	f023 0302 	bic.w	r3, r3, #2
 8004870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	697a      	ldr	r2, [r7, #20]
 8004878:	4313      	orrs	r3, r2
 800487a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a28      	ldr	r2, [pc, #160]	; (8004920 <TIM_OC1_SetConfig+0xfc>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00b      	beq.n	800489c <TIM_OC1_SetConfig+0x78>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a27      	ldr	r2, [pc, #156]	; (8004924 <TIM_OC1_SetConfig+0x100>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d007      	beq.n	800489c <TIM_OC1_SetConfig+0x78>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a26      	ldr	r2, [pc, #152]	; (8004928 <TIM_OC1_SetConfig+0x104>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d003      	beq.n	800489c <TIM_OC1_SetConfig+0x78>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a25      	ldr	r2, [pc, #148]	; (800492c <TIM_OC1_SetConfig+0x108>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d10c      	bne.n	80048b6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f023 0308 	bic.w	r3, r3, #8
 80048a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f023 0304 	bic.w	r3, r3, #4
 80048b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	4a19      	ldr	r2, [pc, #100]	; (8004920 <TIM_OC1_SetConfig+0xfc>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d00b      	beq.n	80048d6 <TIM_OC1_SetConfig+0xb2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a18      	ldr	r2, [pc, #96]	; (8004924 <TIM_OC1_SetConfig+0x100>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d007      	beq.n	80048d6 <TIM_OC1_SetConfig+0xb2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a17      	ldr	r2, [pc, #92]	; (8004928 <TIM_OC1_SetConfig+0x104>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d003      	beq.n	80048d6 <TIM_OC1_SetConfig+0xb2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a16      	ldr	r2, [pc, #88]	; (800492c <TIM_OC1_SetConfig+0x108>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d111      	bne.n	80048fa <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	693a      	ldr	r2, [r7, #16]
 80048ec:	4313      	orrs	r3, r2
 80048ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	621a      	str	r2, [r3, #32]
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	40012c00 	.word	0x40012c00
 8004924:	40014000 	.word	0x40014000
 8004928:	40014400 	.word	0x40014400
 800492c:	40014800 	.word	0x40014800

08004930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	f023 0210 	bic.w	r2, r3, #16
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800495e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800496a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 0320 	bic.w	r3, r3, #32
 800497e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a24      	ldr	r2, [pc, #144]	; (8004a20 <TIM_OC2_SetConfig+0xf0>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d10d      	bne.n	80049b0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800499a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a1b      	ldr	r2, [pc, #108]	; (8004a20 <TIM_OC2_SetConfig+0xf0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00b      	beq.n	80049d0 <TIM_OC2_SetConfig+0xa0>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a1a      	ldr	r2, [pc, #104]	; (8004a24 <TIM_OC2_SetConfig+0xf4>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d007      	beq.n	80049d0 <TIM_OC2_SetConfig+0xa0>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <TIM_OC2_SetConfig+0xf8>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d003      	beq.n	80049d0 <TIM_OC2_SetConfig+0xa0>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <TIM_OC2_SetConfig+0xfc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d113      	bne.n	80049f8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049d6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049de:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	695b      	ldr	r3, [r3, #20]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	693a      	ldr	r2, [r7, #16]
 80049f4:	4313      	orrs	r3, r2
 80049f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68fa      	ldr	r2, [r7, #12]
 8004a02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685a      	ldr	r2, [r3, #4]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	697a      	ldr	r2, [r7, #20]
 8004a10:	621a      	str	r2, [r3, #32]
}
 8004a12:	bf00      	nop
 8004a14:	371c      	adds	r7, #28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40012c00 	.word	0x40012c00
 8004a24:	40014000 	.word	0x40014000
 8004a28:	40014400 	.word	0x40014400
 8004a2c:	40014800 	.word	0x40014800

08004a30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b087      	sub	sp, #28
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0303 	bic.w	r3, r3, #3
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	021b      	lsls	r3, r3, #8
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a23      	ldr	r2, [pc, #140]	; (8004b1c <TIM_OC3_SetConfig+0xec>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d10d      	bne.n	8004aae <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	021b      	lsls	r3, r3, #8
 8004aa0:	697a      	ldr	r2, [r7, #20]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aac:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a1a      	ldr	r2, [pc, #104]	; (8004b1c <TIM_OC3_SetConfig+0xec>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d00b      	beq.n	8004ace <TIM_OC3_SetConfig+0x9e>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a19      	ldr	r2, [pc, #100]	; (8004b20 <TIM_OC3_SetConfig+0xf0>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d007      	beq.n	8004ace <TIM_OC3_SetConfig+0x9e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a18      	ldr	r2, [pc, #96]	; (8004b24 <TIM_OC3_SetConfig+0xf4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d003      	beq.n	8004ace <TIM_OC3_SetConfig+0x9e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a17      	ldr	r2, [pc, #92]	; (8004b28 <TIM_OC3_SetConfig+0xf8>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d113      	bne.n	8004af6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	695b      	ldr	r3, [r3, #20]
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4313      	orrs	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	621a      	str	r2, [r3, #32]
}
 8004b10:	bf00      	nop
 8004b12:	371c      	adds	r7, #28
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40014000 	.word	0x40014000
 8004b24:	40014400 	.word	0x40014400
 8004b28:	40014800 	.word	0x40014800

08004b2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	021b      	lsls	r3, r3, #8
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	031b      	lsls	r3, r3, #12
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <TIM_OC4_SetConfig+0xb8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00b      	beq.n	8004ba8 <TIM_OC4_SetConfig+0x7c>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a15      	ldr	r2, [pc, #84]	; (8004be8 <TIM_OC4_SetConfig+0xbc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <TIM_OC4_SetConfig+0x7c>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a14      	ldr	r2, [pc, #80]	; (8004bec <TIM_OC4_SetConfig+0xc0>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <TIM_OC4_SetConfig+0x7c>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a13      	ldr	r2, [pc, #76]	; (8004bf0 <TIM_OC4_SetConfig+0xc4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d109      	bne.n	8004bbc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004bae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	019b      	lsls	r3, r3, #6
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68fa      	ldr	r2, [r7, #12]
 8004bc6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	621a      	str	r2, [r3, #32]
}
 8004bd6:	bf00      	nop
 8004bd8:	371c      	adds	r7, #28
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	40012c00 	.word	0x40012c00
 8004be8:	40014000 	.word	0x40014000
 8004bec:	40014400 	.word	0x40014400
 8004bf0:	40014800 	.word	0x40014800

08004bf4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b087      	sub	sp, #28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004c38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	041b      	lsls	r3, r3, #16
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a15      	ldr	r2, [pc, #84]	; (8004ca0 <TIM_OC5_SetConfig+0xac>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00b      	beq.n	8004c66 <TIM_OC5_SetConfig+0x72>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <TIM_OC5_SetConfig+0xb0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d007      	beq.n	8004c66 <TIM_OC5_SetConfig+0x72>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <TIM_OC5_SetConfig+0xb4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d003      	beq.n	8004c66 <TIM_OC5_SetConfig+0x72>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a12      	ldr	r2, [pc, #72]	; (8004cac <TIM_OC5_SetConfig+0xb8>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d109      	bne.n	8004c7a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	021b      	lsls	r3, r3, #8
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	621a      	str	r2, [r3, #32]
}
 8004c94:	bf00      	nop
 8004c96:	371c      	adds	r7, #28
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	40012c00 	.word	0x40012c00
 8004ca4:	40014000 	.word	0x40014000
 8004ca8:	40014400 	.word	0x40014400
 8004cac:	40014800 	.word	0x40014800

08004cb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a1b      	ldr	r3, [r3, #32]
 8004cca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	021b      	lsls	r3, r3, #8
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	051b      	lsls	r3, r3, #20
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a16      	ldr	r2, [pc, #88]	; (8004d60 <TIM_OC6_SetConfig+0xb0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00b      	beq.n	8004d24 <TIM_OC6_SetConfig+0x74>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a15      	ldr	r2, [pc, #84]	; (8004d64 <TIM_OC6_SetConfig+0xb4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d007      	beq.n	8004d24 <TIM_OC6_SetConfig+0x74>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a14      	ldr	r2, [pc, #80]	; (8004d68 <TIM_OC6_SetConfig+0xb8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d003      	beq.n	8004d24 <TIM_OC6_SetConfig+0x74>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a13      	ldr	r2, [pc, #76]	; (8004d6c <TIM_OC6_SetConfig+0xbc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d109      	bne.n	8004d38 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	029b      	lsls	r3, r3, #10
 8004d32:	697a      	ldr	r2, [r7, #20]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	621a      	str	r2, [r3, #32]
}
 8004d52:	bf00      	nop
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40014400 	.word	0x40014400
 8004d6c:	40014800 	.word	0x40014800

08004d70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	f023 0201 	bic.w	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	4a1e      	ldr	r2, [pc, #120]	; (8004e14 <TIM_TI1_SetConfig+0xa4>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d007      	beq.n	8004dae <TIM_TI1_SetConfig+0x3e>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004da4:	d003      	beq.n	8004dae <TIM_TI1_SetConfig+0x3e>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4a1b      	ldr	r2, [pc, #108]	; (8004e18 <TIM_TI1_SetConfig+0xa8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d101      	bne.n	8004db2 <TIM_TI1_SetConfig+0x42>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <TIM_TI1_SetConfig+0x44>
 8004db2:	2300      	movs	r3, #0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d008      	beq.n	8004dca <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004dc0:	697a      	ldr	r2, [r7, #20]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	e003      	b.n	8004dd2 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f043 0301 	orr.w	r3, r3, #1
 8004dd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	011b      	lsls	r3, r3, #4
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f023 030a 	bic.w	r3, r3, #10
 8004dec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f003 030a 	and.w	r3, r3, #10
 8004df4:	693a      	ldr	r2, [r7, #16]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40014000 	.word	0x40014000

08004e1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	f023 0201 	bic.w	r2, r3, #1
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f023 030a 	bic.w	r3, r3, #10
 8004e58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	621a      	str	r2, [r3, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b087      	sub	sp, #28
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	60f8      	str	r0, [r7, #12]
 8004e82:	60b9      	str	r1, [r7, #8]
 8004e84:	607a      	str	r2, [r7, #4]
 8004e86:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	f023 0210 	bic.w	r2, r3, #16
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	699b      	ldr	r3, [r3, #24]
 8004e98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	021b      	lsls	r3, r3, #8
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eb8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	031b      	lsls	r3, r3, #12
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ecc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004ed6:	693a      	ldr	r2, [r7, #16]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	697a      	ldr	r2, [r7, #20]
 8004ee0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	621a      	str	r2, [r3, #32]
}
 8004ee8:	bf00      	nop
 8004eea:	371c      	adds	r7, #28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b087      	sub	sp, #28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	f023 0210 	bic.w	r2, r3, #16
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f1e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	031b      	lsls	r3, r3, #12
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f023 0303 	bic.w	r3, r3, #3
 8004f80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f90:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004fa4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	021b      	lsls	r3, r3, #8
 8004faa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	621a      	str	r2, [r3, #32]
}
 8004fc0:	bf00      	nop
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b087      	sub	sp, #28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	69db      	ldr	r3, [r3, #28]
 8004fea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ff8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	021b      	lsls	r3, r3, #8
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800500a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	031b      	lsls	r3, r3, #12
 8005010:	b29b      	uxth	r3, r3
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	4313      	orrs	r3, r2
 8005016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800501e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	031b      	lsls	r3, r3, #12
 8005024:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	4313      	orrs	r3, r2
 800502c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	621a      	str	r2, [r3, #32]
}
 800503a:	bf00      	nop
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr

08005046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005046:	b480      	push	{r7}
 8005048:	b085      	sub	sp, #20
 800504a:	af00      	add	r7, sp, #0
 800504c:	6078      	str	r0, [r7, #4]
 800504e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4313      	orrs	r3, r2
 8005064:	f043 0307 	orr.w	r3, r3, #7
 8005068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	609a      	str	r2, [r3, #8]
}
 8005070:	bf00      	nop
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	021a      	lsls	r2, r3, #8
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	431a      	orrs	r2, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	697a      	ldr	r2, [r7, #20]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	697a      	ldr	r2, [r7, #20]
 80050ae:	609a      	str	r2, [r3, #8]
}
 80050b0:	bf00      	nop
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	f003 031f 	and.w	r3, r3, #31
 80050ce:	2201      	movs	r2, #1
 80050d0:	fa02 f303 	lsl.w	r3, r2, r3
 80050d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	6a1a      	ldr	r2, [r3, #32]
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	43db      	mvns	r3, r3
 80050de:	401a      	ands	r2, r3
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	6a1a      	ldr	r2, [r3, #32]
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	6879      	ldr	r1, [r7, #4]
 80050f0:	fa01 f303 	lsl.w	r3, r1, r3
 80050f4:	431a      	orrs	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	621a      	str	r2, [r3, #32]
}
 80050fa:	bf00      	nop
 80050fc:	371c      	adds	r7, #28
 80050fe:	46bd      	mov	sp, r7
 8005100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005104:	4770      	bx	lr
	...

08005108 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800511c:	2302      	movs	r3, #2
 800511e:	e04f      	b.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a21      	ldr	r2, [pc, #132]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d108      	bne.n	800515c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005150:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	4313      	orrs	r3, r2
 800515a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a14      	ldr	r2, [pc, #80]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d009      	beq.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005188:	d004      	beq.n	8005194 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a10      	ldr	r2, [pc, #64]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d10c      	bne.n	80051ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800519a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051be:	2300      	movs	r3, #0
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	40012c00 	.word	0x40012c00
 80051d0:	40014000 	.word	0x40014000

080051d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051de:	2300      	movs	r3, #0
 80051e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	d101      	bne.n	80051f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051ec:	2302      	movs	r3, #2
 80051ee:	e060      	b.n	80052b2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005256:	4313      	orrs	r3, r2
 8005258:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	041b      	lsls	r3, r3, #16
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a14      	ldr	r2, [pc, #80]	; (80052c0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d115      	bne.n	80052a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	051b      	lsls	r3, r3, #20
 8005280:	4313      	orrs	r3, r2
 8005282:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052b0:	2300      	movs	r3, #0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40012c00 	.word	0x40012c00

080052c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <__libc_init_array>:
 8005300:	b570      	push	{r4, r5, r6, lr}
 8005302:	4d0d      	ldr	r5, [pc, #52]	; (8005338 <__libc_init_array+0x38>)
 8005304:	4c0d      	ldr	r4, [pc, #52]	; (800533c <__libc_init_array+0x3c>)
 8005306:	1b64      	subs	r4, r4, r5
 8005308:	10a4      	asrs	r4, r4, #2
 800530a:	2600      	movs	r6, #0
 800530c:	42a6      	cmp	r6, r4
 800530e:	d109      	bne.n	8005324 <__libc_init_array+0x24>
 8005310:	4d0b      	ldr	r5, [pc, #44]	; (8005340 <__libc_init_array+0x40>)
 8005312:	4c0c      	ldr	r4, [pc, #48]	; (8005344 <__libc_init_array+0x44>)
 8005314:	f000 f820 	bl	8005358 <_init>
 8005318:	1b64      	subs	r4, r4, r5
 800531a:	10a4      	asrs	r4, r4, #2
 800531c:	2600      	movs	r6, #0
 800531e:	42a6      	cmp	r6, r4
 8005320:	d105      	bne.n	800532e <__libc_init_array+0x2e>
 8005322:	bd70      	pop	{r4, r5, r6, pc}
 8005324:	f855 3b04 	ldr.w	r3, [r5], #4
 8005328:	4798      	blx	r3
 800532a:	3601      	adds	r6, #1
 800532c:	e7ee      	b.n	800530c <__libc_init_array+0xc>
 800532e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005332:	4798      	blx	r3
 8005334:	3601      	adds	r6, #1
 8005336:	e7f2      	b.n	800531e <__libc_init_array+0x1e>
 8005338:	080053a0 	.word	0x080053a0
 800533c:	080053a0 	.word	0x080053a0
 8005340:	080053a0 	.word	0x080053a0
 8005344:	080053a4 	.word	0x080053a4

08005348 <memset>:
 8005348:	4402      	add	r2, r0
 800534a:	4603      	mov	r3, r0
 800534c:	4293      	cmp	r3, r2
 800534e:	d100      	bne.n	8005352 <memset+0xa>
 8005350:	4770      	bx	lr
 8005352:	f803 1b01 	strb.w	r1, [r3], #1
 8005356:	e7f9      	b.n	800534c <memset+0x4>

08005358 <_init>:
 8005358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800535a:	bf00      	nop
 800535c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800535e:	bc08      	pop	{r3}
 8005360:	469e      	mov	lr, r3
 8005362:	4770      	bx	lr

08005364 <_fini>:
 8005364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005366:	bf00      	nop
 8005368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800536a:	bc08      	pop	{r3}
 800536c:	469e      	mov	lr, r3
 800536e:	4770      	bx	lr
